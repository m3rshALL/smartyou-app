// scripts/test-full-integration.js
async function main() {
  console.log("\nüî• –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ SmartYou Platform\n");

  // Get signers
  const [deployer, student1, student2, educator] = await ethers.getSigners();
  const deployerAddress = await deployer.getAddress();
  const student1Address = await student1.getAddress();
  const student2Address = await student2.getAddress();
  const educatorAddress = await educator.getAddress();

  console.log("üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏:");
  console.log("‚îú‚îÄ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞—Ç–µ–ª—å:", deployerAddress);
  console.log("‚îú‚îÄ –°—Ç—É–¥–µ–Ω—Ç 1:", student1Address);
  console.log("‚îú‚îÄ –°—Ç—É–¥–µ–Ω—Ç 2:", student2Address);
  console.log("‚îî‚îÄ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å:", educatorAddress);

  // Deploy SmartYou Token
  console.log("\nüöÄ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ SmartYou Token...");
  const SmartYouToken = await ethers.getContractFactory("SmartYouToken");
  const initialSupply = ethers.parseEther("500000"); // 500k tokens (leave room for rewards)
  const token = await SmartYouToken.deploy(
    "SmartYou Token",
    "SYT",
    initialSupply,
    deployerAddress
  );
  await token.waitForDeployment();
  const tokenAddress = await token.getAddress();
  
  console.log("‚úÖ SmartYou Token —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç:", tokenAddress);

  // Deploy SimpleStorage for testing
  console.log("\nüì¶ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ SimpleStorage...");
  const SimpleStorage = await ethers.getContractFactory("SimpleStorage");
  const storage = await SimpleStorage.deploy(42);
  await storage.waitForDeployment();
  const storageAddress = await storage.getAddress();
  
  console.log("‚úÖ SimpleStorage —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç:", storageAddress);

  // Test educational workflow
  console.log("\nüéì –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞...");
  
  // 1. Add educator
  console.log("1Ô∏è‚É£ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è...");
  const addEducatorTx = await token.addEducator(educatorAddress);
  await addEducatorTx.wait();
  console.log("‚úÖ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω:", educatorAddress);

  // 2. Student 1 completes level 1
  console.log("2Ô∏è‚É£ –°—Ç—É–¥–µ–Ω—Ç 1 –∑–∞–≤–µ—Ä—à–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å 1...");
  const tokenAsEducator = token.connect(educator);
  const rewardTx1 = await tokenAsEducator.rewardForLevel(student1Address, 1);
  await rewardTx1.wait();
  
  const student1Balance = await token.balanceOf(student1Address);
  const student1Progress = await token.getStudentProgress(student1Address);
  
  console.log("‚úÖ –ù–∞–≥—Ä–∞–¥–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∞ —Å—Ç—É–¥–µ–Ω—Ç—É 1:");
  console.log("   ‚îú‚îÄ –ë–∞–ª–∞–Ω—Å:", ethers.formatEther(student1Balance), "SYT");
  console.log("   ‚îî‚îÄ –£—Ä–æ–≤–Ω–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ:", student1Progress[0].toString());

  // 3. Student 2 completes levels 1 and 2
  console.log("3Ô∏è‚É£ –°—Ç—É–¥–µ–Ω—Ç 2 –∑–∞–≤–µ—Ä—à–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å 1...");
  const rewardTx2 = await tokenAsEducator.rewardForLevel(student2Address, 1);
  await rewardTx2.wait();
  
  console.log("4Ô∏è‚É£ –°—Ç—É–¥–µ–Ω—Ç 2 –∑–∞–≤–µ—Ä—à–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å 2...");
  const rewardTx3 = await tokenAsEducator.rewardForLevel(student2Address, 2);
  await rewardTx3.wait();
  
  const student2Balance = await token.balanceOf(student2Address);
  const student2Progress = await token.getStudentProgress(student2Address);
  
  console.log("‚úÖ –ù–∞–≥—Ä–∞–¥—ã –Ω–∞—á–∏—Å–ª–µ–Ω—ã —Å—Ç—É–¥–µ–Ω—Ç—É 2:");
  console.log("   ‚îú‚îÄ –ë–∞–ª–∞–Ω—Å:", ethers.formatEther(student2Balance), "SYT");
  console.log("   ‚îî‚îÄ –£—Ä–æ–≤–Ω–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ:", student2Progress[0].toString());

  // 4. Test bulk rewards
  console.log("5Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø–æ–≤—ã—Ö –Ω–∞–≥—Ä–∞–¥...");
  
  // Get additional signers for bulk test
  const allSigners = await ethers.getSigners();
  const student3 = allSigners[4]; // Use 5th account
  const student4 = allSigners[5]; // Use 6th account  
  const student3Address = await student3.getAddress();
  const student4Address = await student4.getAddress();
  
  const bulkTx = await tokenAsEducator.bulkReward(
    [student3Address, student4Address],
    [1, 1]
  );
  await bulkTx.wait();
  
  const student3Balance = await token.balanceOf(student3Address);
  const student4Balance = await token.balanceOf(student4Address);
  
  console.log("‚úÖ –ì—Ä—É–ø–ø–æ–≤—ã–µ –Ω–∞–≥—Ä–∞–¥—ã –Ω–∞—á–∏—Å–ª–µ–Ω—ã:");
  console.log("   ‚îú‚îÄ –°—Ç—É–¥–µ–Ω—Ç 3:", ethers.formatEther(student3Balance), "SYT");
  console.log("   ‚îî‚îÄ –°—Ç—É–¥–µ–Ω—Ç 4:", ethers.formatEther(student4Balance), "SYT");

  // Test contract interactions
  console.log("\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞–º–∏...");
  
  // Test SimpleStorage
  console.log("üì¶ SimpleStorage —Ç–µ—Å—Ç—ã:");
  const initialValue = await storage.get();
  console.log("‚îú‚îÄ –ù–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:", initialValue.toString());
  
  const setTx = await storage.set(999);
  await setTx.wait();
  
  const newValue = await storage.get();
  console.log("‚îú‚îÄ –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:", newValue.toString());
  console.log("‚îî‚îÄ –¢–µ—Å—Ç –ø—Ä–æ—à–µ–ª:", newValue.toString() === "999" ? "‚úÖ" : "‚ùå");

  // Generate statistics
  console.log("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã:");
  
  const totalSupply = await token.totalSupply();
  const rewardPerLevel = await token.REWARD_PER_LEVEL();
  const maxSupply = await token.MAX_SUPPLY();
  
  console.log("‚îú‚îÄ –û–±—â–∏–π –æ–±—ä–µ–º –≤—ã–ø—É—Å–∫–∞:", ethers.formatEther(totalSupply), "SYT");
  console.log("‚îú‚îÄ –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ —É—Ä–æ–≤–µ–Ω—å:", ethers.formatEther(rewardPerLevel), "SYT");
  console.log("‚îú‚îÄ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤—ã–ø—É—Å–∫:", ethers.formatEther(maxSupply), "SYT");
  console.log("‚îú‚îÄ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: 4");
  console.log("‚îú‚îÄ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π: 5");
  console.log("‚îî‚îÄ –û–±—â–∏—Ö –Ω–∞–≥—Ä–∞–¥ –≤—ã–¥–∞–Ω–æ:", ethers.formatEther(await token.balanceOf(student1Address) + await token.balanceOf(student2Address) + await token.balanceOf(student3Address) + await token.balanceOf(student4Address)), "SYT");

  // Save deployment summary
  const deploymentSummary = {
    timestamp: new Date().toISOString(),
    contracts: {
      SmartYouToken: {
        address: tokenAddress,
        name: "SmartYou Token",
        symbol: "SYT",
        totalSupply: ethers.formatEther(totalSupply),
        owner: deployerAddress
      },
      SimpleStorage: {
        address: storageAddress,
        name: "SimpleStorage",
        currentValue: newValue.toString()
      }
    },
    participants: {
      deployer: deployerAddress,
      educator: educatorAddress,
      students: [
        {
          address: student1Address,
          balance: ethers.formatEther(student1Balance),
          levelsCompleted: student1Progress[0].toString()
        },
        {
          address: student2Address,
          balance: ethers.formatEther(student2Balance),
          levelsCompleted: student2Progress[0].toString()
        },
        {
          address: student3Address,
          balance: ethers.formatEther(student3Balance),
          levelsCompleted: "1"
        },
        {
          address: student4Address,
          balance: ethers.formatEther(student4Balance),
          levelsCompleted: "1"
        }
      ]
    },
    network: "localhost",
    testResults: {
      tokenDeployment: "‚úÖ",
      contractDeployment: "‚úÖ",
      educatorFunctionality: "‚úÖ",
      rewardSystem: "‚úÖ",
      bulkRewards: "‚úÖ",
      contractInteraction: "‚úÖ",
      allTestsPassed: true
    }
  };

  // Write to file using dynamic import
  const fs = await import('fs');
  fs.default.writeFileSync(
    'full-integration-test-results.json',
    JSON.stringify(deploymentSummary, null, 2)
  );

  console.log("\nüéâ –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!");
  console.log("‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê");
  console.log("‚îÇ               üèÜ SmartYou Platform                          ‚îÇ");
  console.log("‚îÇ                –ì–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!                       ‚îÇ");
  console.log("‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§");
  console.log("‚îÇ üåê Blockchain IDE: /blockchain                              ‚îÇ");
  console.log("‚îÇ üéì –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ —É—Ä–æ–≤–Ω–∏: /levels                         ‚îÇ");
  console.log("‚îÇ üèÖ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ –Ω–∞–≥—Ä–∞–¥—ã: /achievements                     ‚îÇ");
  console.log("‚îÇ üìä –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤: /leaderboard                           ‚îÇ");
  console.log("‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò");
  console.log("\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ full-integration-test-results.json");
  
  return deploymentSummary;
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞:", error);
    process.exit(1);
  });
