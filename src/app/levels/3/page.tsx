'use client';

import { useEffect, useState } from 'react';
import Widget from '@/shared/ui/Widget';
import LevelView from '@/shared/ui/LevelView';
import { useConsole } from '@/features/model/useConsole';
import { Editor } from '@monaco-editor/react';
import { complete, run, spawnCactus } from '@/features/model/gameMechanics';
import { useLevelTransition } from '@/features/model/levelTransition';
import { useExtendedGameStore } from '@/features/model/useExtendedGameStore';
import { useSoundManager } from '@/features/model/useSoundManager';

export default function LevelThree() {
    const { addLog } = useConsole();
    const { completeLevel, goToNext, hasNextLevel } = useLevelTransition();
    const { initializePlayer, startGameSession, endGameSession, updatePlayerStats, unlockAchievement, setCurrentLevel } = useExtendedGameStore();
    const { playSound } = useSoundManager();

    const currentLevelNumber = 3;
    const hasNext = hasNextLevel(currentLevelNumber);

    const [code, setCode] = useState<string>(`// –°–æ–∑–¥–∞–π—Ç–µ —Ä—ã–Ω–æ–∫ –º–∞–≥–∏—á–µ—Å–∫–∏—Ö –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
pragma solidity ^0.8.0;

contract MagicMarket {
    // TODO: –°–æ–∑–¥–∞–π—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É Item
    // struct Item { ... }
    
    mapping(uint256 => Item) public items;
    uint256 public itemCount;
    
    event ItemPurchased(uint256 itemId, address buyer, uint256 price);
    
    constructor() {
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã
        createItem("–ú–∞–≥–∏—á–µ—Å–∫–∏–π –º–µ—á", 100);
        createItem("–ó–µ–ª—å–µ –∏—Å—Ü–µ–ª–µ–Ω–∏—è", 50);
        createItem("–ö–æ–ª—å—Ü–æ –Ω–µ–≤–∏–¥–∏–º–æ—Å—Ç–∏", 200);
    }
    
    function createItem(string memory name, uint256 price) public {
        itemCount++;
        // TODO: –°–æ–∑–¥–∞–π—Ç–µ item –≤ mapping
    }
    
    function purchase(uint256 itemId) public payable {
        // TODO: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ item
        // TODO: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤
        // TODO: –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –≤–ª–∞–¥–µ–Ω–∏–µ
        // TODO: –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–±—ã—Ç–∏–µ
    }
}`);

    const [marketplace, setMarketplace] = useState([
        { id: 1, name: "–ú–∞–≥–∏—á–µ—Å–∫–∏–π –º–µ—á", price: 100, owner: "–ú–∞–≥–∞–∑–∏–Ω", sold: false },
        { id: 2, name: "–ó–µ–ª—å–µ –∏—Å—Ü–µ–ª–µ–Ω–∏—è", price: 50, owner: "–ú–∞–≥–∞–∑–∏–Ω", sold: false },
        { id: 3, name: "–ö–æ–ª—å—Ü–æ –Ω–µ–≤–∏–¥–∏–º–æ—Å—Ç–∏", price: 200, owner: "–ú–∞–≥–∞–∑–∏–Ω", sold: false }
    ]);

    const [showNextLevelButton, setShowNextLevelButton] = useState(false);
    const [levelCompleted, setLevelCompleted] = useState(false);
    const [marketplaceActive, setMarketplaceActive] = useState(false);

    useEffect(() => {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–≥—Ä–æ–∫–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        const name = document.cookie
            .split('; ')
            .find(row => row.startsWith('name='))
            ?.split('=')[1];
        
        if (name) {
            initializePlayer(decodeURIComponent(name));
        }
        
        setCurrentLevel(currentLevelNumber);
        startGameSession(currentLevelNumber);

        run();
        addLog('üè™ –ú–∏—Å—Å–∏—è: –°–æ–∑–¥–∞–π—Ç–µ –º–∞–≥–∏—á–µ—Å–∫–∏–π —Ä—ã–Ω–æ–∫!');
        addLog('‚ö° –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ç–æ—Ä–≥–æ–≤–ª—é –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞–º–∏ —á–µ—Ä–µ–∑ struct –∏ —Å–æ–±—ã—Ç–∏—è');
        
        setTimeout(() => {
            spawnCactus();
        }, 1000);
    }, [initializePlayer, setCurrentLevel, startGameSession, addLog, currentLevelNumber]);

    const checkCode = () => {
        const hasStruct = code.includes('struct Item') && 
                         code.includes('string') && 
                         code.includes('uint256') && 
                         code.includes('address');
        const hasPurchaseLogic = code.includes('msg.value') && 
                               code.includes('owner') &&
                               code.includes('require');
        const hasEvent = code.includes('emit ItemPurchased');
        
        return hasStruct && hasPurchaseLogic && hasEvent;
    };

    const simulateMarketplace = () => {
        const buyers = ["–ê–ª–∏—Å–∞", "–ë–æ–±", "–ß–∞—Ä–ª–∏"];
        
        marketplace.forEach((item, index) => {
            if (!item.sold) {
                setTimeout(() => {
                    const buyer = buyers[Math.floor(Math.random() * buyers.length)];
                    
                    setMarketplace(prev => prev.map(i => 
                        i.id === item.id 
                            ? { ...i, owner: buyer, sold: true }
                            : i
                    ));
                    
                    addLog(`üí∞ ${buyer} –∫—É–ø–∏–ª "${item.name}" –∑–∞ ${item.price} —Ç–æ–∫–µ–Ω–æ–≤`);
                    addLog(`üì° Event: ItemPurchased(${item.id}, ${buyer}, ${item.price})`);
                }, index * 1500);
            }
        });
    };

    const handleCompile = () => {
        addLog('üîç –ö–æ–º–ø–∏–ª—è—Ü–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ —Ä—ã–Ω–∫–∞...');
        playSound('run');
        
        if (checkCode()) {
            playSound('success');
            addLog('‚úÖ –ö–æ–Ω—Ç—Ä–∞–∫—Ç –º–∞–≥–∏—á–µ—Å–∫–æ–≥–æ —Ä—ã–Ω–∫–∞ —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç!');
            addLog('üéâ –¢–æ—Ä–≥–æ–≤–ª—è –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞–º–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!');
            setMarketplaceActive(true);
            setLevelCompleted(true);
            
            // –ó–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä–æ–≤—É—é —Å–µ—Å—Å–∏—é
            endGameSession(true, 'excellent');
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞
            const stars = 3;
            const sessionTime = Date.now() - (Date.now() - 50000);
            updatePlayerStats(currentLevelNumber, stars, sessionTime);
            
            // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
            unlockAchievement('market_master');
            
            // –ó–∞–≤–µ—Ä—à–∞–µ–º —É—Ä–æ–≤–µ–Ω—å
            completeLevel(currentLevelNumber);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
            setTimeout(() => {
                setShowNextLevelButton(true);
                if (hasNext) {
                    addLog('‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!');
                } else {
                    addLog('üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—Å–µ —É—Ä–æ–≤–Ω–∏ –ø—Ä–æ–π–¥–µ–Ω—ã!');
                }
            }, 2000);
            
            simulateMarketplace();
            complete();
        } else {
            playSound('error');
            addLog('‚ùå –û—à–∏–±–∫–∏ –≤ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä—ã–Ω–∫–∞!');
            addLog('üí° –°–æ–∑–¥–∞–π—Ç–µ struct Item —Å –ø–æ–ª—è–º–∏: string name, uint256 price, address owner');
            addLog('üí° –í purchase() –ø—Ä–æ–≤–µ—Ä—å—Ç–µ msg.value >= item.price');
            addLog('üí° –ù–µ –∑–∞–±—É–¥—å—Ç–µ emit ItemPurchased –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏');
        }
    };

    const handleNextLevel = () => {
        goToNext(currentLevelNumber);
    };

    const handleBackToLevels = () => {
        goToNext(5); // –ü–µ—Ä–µ–¥–∞—ë–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å, —á—Ç–æ–±—ã –ø–æ–ø–∞—Å—Ç—å –≤ —Å–ø–∏—Å–æ–∫
    };

    return (
        <LevelView>
            <Widget
                windowMode
                title="–£—Ä–æ–≤–µ–Ω—å 3: –†—ã–Ω–æ–∫ –º–∞–≥–∏–∏"
                icon={
                    <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="#e3e3e3">
                        <path d="M280-600v-80q0-83 58.5-141.5T480-880q83 0 141.5 58.5T680-680v80h40q33 0 56.5 23.5T800-520v360q0 33-23.5 56.5T720-80H240q-33 0-56.5-23.5T160-160v-360q0-33 23.5-56.5T240-600h40Zm80 0h240v-80q0-50-35-85t-85-35q-50 0-85 35t-35 85v80Z"/>
                    </svg>
                }
            >
                <div className="h-full w-full overflow-y-scroll relative pb-24">
                    <div className="absolute bottom-16 right-3 flex gap-2">
                        <div className={`px-3 py-1 rounded text-sm ${marketplaceActive ? 'bg-green-600' : 'bg-purple-600'}`}>
                            {marketplaceActive ? 'üè™ –†—ã–Ω–æ–∫ –∞–∫—Ç–∏–≤–µ–Ω' : 'üîí –†—ã–Ω–æ–∫ –∑–∞–∫—Ä—ã—Ç'}
                        </div>
                        
                        {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è */}
                        {showNextLevelButton ? (
                            hasNext ? (
                                <button
                                    className="px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700 animate-pulse"
                                    onClick={handleNextLevel}
                                >
                                    –°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å ‚Üí
                                </button>
                            ) : (
                                <button
                                    className="px-4 py-2 bg-purple-600 text-white rounded hover:bg-purple-700"
                                    onClick={handleBackToLevels}
                                >
                                    –ö —Å–ø–∏—Å–∫—É —É—Ä–æ–≤–Ω–µ–π
                                </button>
                            )
                        ) : (
                            <button
                                className="px-4 py-2 bg-purple-600 text-white rounded hover:bg-purple-700"
                                onClick={handleCompile}
                                disabled={levelCompleted}
                            >
                                {levelCompleted ? '–í—ã–ø–æ–ª–Ω–µ–Ω–æ ‚úì' : '–û—Ç–∫—Ä—ã—Ç—å —Ä—ã–Ω–æ–∫'}
                            </button>
                        )}
                    </div>

                    <div className="p-4">
                        <div className="text-2xl font-semibold">
                            üè™ –ó–∞–¥–∞—á–∞ #3: –†—ã–Ω–æ–∫ –º–∞–≥–∏–∏
                        </div>
                        <div className="mt-2 text-lg">
                            –°–æ–∑–¥–∞–π—Ç–µ —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –º–∞–≥–∏—á–µ—Å–∫–∏–º–∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞–º–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä –∏ —Å–æ–±—ã—Ç–∏–π.
                        </div>

                        {/* –°–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ */}
                        {levelCompleted && (
                            <div className="mt-4 p-3 bg-green-900/30 border border-green-600 rounded">
                                <div className="font-semibold text-green-300">üéâ –£—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–π–¥–µ–Ω!</div>
                                <div className="text-green-200">
                                    –û—Ç–ª–∏—á–Ω–æ! –í—ã —Å–æ–∑–¥–∞–ª–∏ —Ä–∞–±–æ—á–∏–π —Ä—ã–Ω–æ–∫ –º–∞–≥–∏—á–µ—Å–∫–∏—Ö –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤. 
                                    {hasNext ? " –°–ª–µ–¥—É—é—â–∏–π –≤—ã–∑–æ–≤ –∂–¥—ë—Ç –≤–∞—Å - —Å–æ–∑–¥–∞–Ω–∏–µ DAO!" : " –í—Å–µ —É—Ä–æ–≤–Ω–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!"}
                                </div>
                            </div>
                        )}

                        {/* –í–∏—Ç—Ä–∏–Ω–∞ —Ä—ã–Ω–∫–∞ */}
                        <div className="mt-4 p-3 bg-purple-900/30 border border-purple-600 rounded">
                            <div className="font-semibold text-purple-300">–í–∏—Ç—Ä–∏–Ω–∞ –º–∞–≥–∏—á–µ—Å–∫–æ–≥–æ —Ä—ã–Ω–∫–∞:</div>
                            <div className="grid grid-cols-1 md:grid-cols-3 gap-2 mt-2">
                                {marketplace.map((item) => (
                                    <div key={item.id} className={`p-2 rounded transition-all duration-300 ${
                                        item.sold ? 'bg-gray-700 border border-gray-600' : 'bg-purple-800/30 border border-purple-500/30'
                                    }`}>
                                        <div className="font-semibold">{item.name}</div>
                                        <div className="text-sm">üí∞ {item.price} —Ç–æ–∫–µ–Ω–æ–≤</div>
                                        <div className="text-xs">üë§ –í–ª–∞–¥–µ–ª–µ—Ü: {item.owner}</div>
                                        <div className={`text-xs font-medium ${item.sold ? 'text-red-300' : 'text-green-300'}`}>
                                            {item.sold ? '‚ùå –ü—Ä–æ–¥–∞–Ω–æ' : '‚úÖ –í –ø—Ä–æ–¥–∞–∂–µ'}
                                        </div>
                                    </div>
                                ))}
                            </div>
                        </div>

                        {/* –ü–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ */}
                        {!levelCompleted && (
                            <div className="mt-4 p-3 bg-yellow-900/30 border border-yellow-600 rounded">
                                <div className="font-semibold text-yellow-300">üí° –ü–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏:</div>
                                <div className="text-yellow-200 text-sm space-y-1 mt-2">
                                    <div>‚Ä¢ –°–æ–∑–¥–∞–π—Ç–µ struct Item —Å –ø–æ–ª—è–º–∏: string name, uint256 price, address owner</div>
                                    <div>‚Ä¢ –í createItem() —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ item –≤ mapping: items[itemCount] = Item(...)</div>
                                    <div>‚Ä¢ –í purchase() –ø—Ä–æ–≤–µ—Ä—å—Ç–µ: require(msg.value {'>='}= items[itemId].price)</div>
                                    <div>‚Ä¢ –û–±–Ω–æ–≤–∏—Ç–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞: items[itemId].owner = msg.sender</div>
                                    <div>‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ —Å–æ–±—ã—Ç–∏–µ: emit ItemPurchased(itemId, msg.sender, price)</div>
                                </div>
                            </div>
                        )}

                        <div className="mt-6 h-[500px] flex flex-col gap-4">
                            <Editor
                                language="solidity"
                                theme="vs-dark"
                                value={code}
                                onChange={(value?: string) => setCode(value ?? '')}
                                options={{
                                    minimap: { enabled: false },
                                    fontSize: 14,
                                    readOnly: levelCompleted, // –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                                }}
                            />
                        </div>
                    </div>
                </div>
            </Widget>
        </LevelView>
    );
}