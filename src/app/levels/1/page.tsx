'use client';

import { useEffect } from 'react';
import { useConsole } from '@/features/model/useConsole';
import { complete, run, spawnCactus } from '@/features/model/gameMechanics';
import { useLevelTransition } from '@/features/model/levelTransition';
import { useExtendedGameStore } from '@/features/model/useExtendedGameStore';
import { useSoundManager } from '@/features/model/useSoundManager';
import RemixLevelIDE from '@/features/ui/RemixLevelIDE';

export default function LevelOne() {
    const { addLog } = useConsole();
    const { completeLevel, goToNext, hasNextLevel } = useLevelTransition();
    const { initializePlayer, startGameSession, endGameSession, updatePlayerStats, unlockAchievement, setCurrentLevel } = useExtendedGameStore();
    const { playSound } = useSoundManager();

    const currentLevelNumber = 1;
    const hasNext = hasNextLevel(currentLevelNumber);

    useEffect(() => {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–≥—Ä–æ–∫–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        const name = document.cookie
            .split('; ')
            .find(row => row.startsWith('name='))
            ?.split('=')[1];
        
        if (name) {
            initializePlayer(decodeURIComponent(name));
        }
        
        setCurrentLevel(currentLevelNumber);
        startGameSession(currentLevelNumber);
        
        run();
        addLog('üè¶ –ú–∏—Å—Å–∏—è: –ò—Å–ø—Ä–∞–≤—å—Ç–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –≤ –∫–æ—à–µ–ª—å–∫–µ!');
        addLog('‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –∫–æ–Ω—Ç—Ä–∞–∫—Ç –∏–º–µ–µ—Ç 3 —Å–µ—Ä—å—ë–∑–Ω—ã—Ö —É—è–∑–≤–∏–º–æ—Å—Ç–∏');
        
        setTimeout(() => {
            spawnCactus();
        }, 1000);
    }, [initializePlayer, setCurrentLevel, startGameSession, addLog, currentLevelNumber]);

    const handleSuccess = () => {
        playSound('success');
        addLog('‚úÖ –í—Å–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏ —É—Å—Ç—Ä–∞–Ω–µ–Ω—ã!');
        addLog('üõ°Ô∏è –ö–æ–Ω—Ç—Ä–∞–∫—Ç –∑–∞—â–∏—â—ë–Ω –æ—Ç –∞—Ç–∞–∫!');
        
        // –ó–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä–æ–≤—É—é —Å–µ—Å—Å–∏—é
        endGameSession(true, 'excellent');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞
        const stars = 3;
        const sessionTime = Date.now() - (Date.now() - 30000);
        updatePlayerStats(currentLevelNumber, stars, sessionTime);
        
        // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
        unlockAchievement('first_steps');
        
        // –ó–∞–≤–µ—Ä—à–∞–µ–º —É—Ä–æ–≤–µ–Ω—å
        completeLevel(currentLevelNumber);
        
        complete();
        
        setTimeout(() => {
            if (hasNext) {
                addLog('‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!');
            } else {
                addLog('üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—Å–µ —É—Ä–æ–≤–Ω–∏ –ø—Ä–æ–π–¥–µ–Ω—ã!');
            }
        }, 2000);
    };

    return (
        <RemixLevelIDE
            levelNumber={1}
            title="üè¶ –£—Ä–æ–≤–µ–Ω—å 1: –ö–æ—à–µ–ª—ë–∫ –≤ –æ–ø–∞—Å–Ω–æ—Å—Ç–∏"
            description="–ò—Å–ø—Ä–∞–≤—å—Ç–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤ —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ –∫–æ—à–µ–ª—å–∫–∞"
            hints={[
                "–î–æ–±–∞–≤—å—Ç–µ modifier onlyOwner() —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π msg.sender == owner",
                "–ü—Ä–∏–º–µ–Ω–∏—Ç–µ onlyOwner –∫ —Ñ—É–Ω–∫—Ü–∏—è–º withdraw –∏ emergency", 
                "–í deposit() –ø–æ–ø–æ–ª–Ω—è–π—Ç–µ –±–∞–ª–∞–Ω—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è: balances[msg.sender]",
                "–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ require() –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫"
            ]}
            onSuccess={handleSuccess}
            successMessage="–û—Ç–ª–∏—á–Ω–æ! –ö–æ—à–µ–ª—ë–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏!"
        />
    );
}
