'use client';

import { useEffect, useState } from 'react';
import Widget from '@/shared/ui/Widget';
import LevelView from '@/shared/ui/LevelView';
import { useConsole } from '@/features/model/useConsole';
import { Editor } from '@monaco-editor/react';
import { complete, run, spawnCactus } from '@/features/model/gameMechanics';
import { useLevelTransition } from '@/features/model/levelTransition';
import { useExtendedGameStore } from '@/features/model/useExtendedGameStore';
import { useSoundManager } from '@/features/model/useSoundManager';

export default function LevelOne() {
    const { addLog } = useConsole();
    const { completeLevel, goToNext, hasNextLevel } = useLevelTransition();
    const { initializePlayer, startGameSession, endGameSession, updatePlayerStats, unlockAchievement, setCurrentLevel } = useExtendedGameStore();
    const { playSound } = useSoundManager();

    const currentLevelNumber = 1;
    const hasNext = hasNextLevel(currentLevelNumber);

    const [code, setCode] = useState<string>(`// –ò—Å–ø—Ä–∞–≤—å—Ç–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –≤ —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ
pragma solidity ^0.8.0;

contract Wallet {
    address public owner;
    mapping(address => uint256) public balances;
    
    constructor() {
        owner = msg.sender;
        balances[owner] = 1000 ether;
    }
    
    // –û–®–ò–ë–ö–ê 1: –Ω–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞
    function withdraw(uint256 amount) public {
        require(balances[msg.sender] >= amount, "Insufficient balance");
        balances[msg.sender] -= amount;
        payable(msg.sender).transfer(amount);
    }
    
    // –û–®–ò–ë–ö–ê 2: –ª—é–±–æ–π –º–æ–∂–µ—Ç –ø–æ–ø–æ–ª–Ω–∏—Ç—å –ª—é–±–æ–º—É
    function deposit(address to) public payable {
        balances[to] += msg.value;
    }
    
    // –û–®–ò–ë–ö–ê 3: –Ω–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –¥–æ—Å—Ç—É–ø–∞
    function emergency() public {
        selfdestruct(payable(msg.sender));
    }
}`);

    const [balance, setBalance] = useState(1000);
    const [transactions, setTransactions] = useState<string[]>([]);
    const [isSecure, setIsSecure] = useState(false);
    const [showNextLevelButton, setShowNextLevelButton] = useState(false);
    const [levelCompleted, setLevelCompleted] = useState(false);

    useEffect(() => {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–≥—Ä–æ–∫–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        const name = document.cookie
            .split('; ')
            .find(row => row.startsWith('name='))
            ?.split('=')[1];
        
        if (name) {
            initializePlayer(decodeURIComponent(name));
        }
        
        setCurrentLevel(currentLevelNumber);
        startGameSession(currentLevelNumber);
        
        run();
        addLog('üè¶ –ú–∏—Å—Å–∏—è: –ò—Å–ø—Ä–∞–≤—å—Ç–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –≤ –∫–æ—à–µ–ª—å–∫–µ!');
        addLog('‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –∫–æ–Ω—Ç—Ä–∞–∫—Ç –∏–º–µ–µ—Ç 3 —Å–µ—Ä—å—ë–∑–Ω—ã—Ö —É—è–∑–≤–∏–º–æ—Å—Ç–∏');
        
        setTimeout(() => {
            spawnCactus();
        }, 1000);
    }, [initializePlayer, setCurrentLevel, startGameSession, addLog, currentLevelNumber]);

    const checkSecurity = () => {
        const hasOwnerCheck = code.includes('msg.sender == owner') || code.includes('onlyOwner');
        const hasModifier = code.includes('modifier onlyOwner');
        const hasDepositFix = !code.includes('balances[to] += msg.value') || code.includes('balances[msg.sender] += msg.value');
        
        return hasOwnerCheck && hasModifier && hasDepositFix;
    };

    const simulateAttacks = () => {
        addLog('üö® –•–∞–∫–µ—Ä—ã –∞—Ç–∞–∫—É—é—Ç –∫–æ–Ω—Ç—Ä–∞–∫—Ç...');
        
        const attacks = [
            { name: '–ü–æ–ø—ã—Ç–∫–∞ –≤—ã–≤–æ–¥–∞ —á—É–∂–∏—Ö —Å—Ä–µ–¥—Å—Ç–≤', success: !isSecure },
            { name: '–ü–æ–ø—ã—Ç–∫–∞ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞', success: !isSecure },
            { name: '–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —á—É–∂–æ–≥–æ —Å—á—ë—Ç–∞', success: !isSecure }
        ];
        
        attacks.forEach((attack, index) => {
            setTimeout(() => {
                if (attack.success) {
                    addLog(`‚ùå ${attack.name}: –£–°–ü–ï–®–ù–û (—É—è–∑–≤–∏–º–æ—Å—Ç—å!)`);
                    setBalance(prev => Math.max(0, prev - 100));
                    setTransactions(prev => [...prev, `üí∏ -100 ETH (${attack.name})`]);
                } else {
                    addLog(`‚úÖ ${attack.name}: –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–û`);
                }
            }, index * 1000);
        });
    };

    const handleCompile = () => {
        addLog('üîç –ê–Ω–∞–ª–∏–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞...');
        playSound('run');
        
        const secure = checkSecurity();
        setIsSecure(secure);
        
        if (secure) {
            playSound('success');
            addLog('‚úÖ –í—Å–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏ —É—Å—Ç—Ä–∞–Ω–µ–Ω—ã!');
            addLog('üõ°Ô∏è –ö–æ–Ω—Ç—Ä–∞–∫—Ç –∑–∞—â–∏—â—ë–Ω –æ—Ç –∞—Ç–∞–∫!');
            setLevelCompleted(true);
            
            // –ó–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä–æ–≤—É—é —Å–µ—Å—Å–∏—é
            endGameSession(true, 'excellent');
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞
            const stars = 3;
            const sessionTime = Date.now() - (Date.now() - 30000);
            updatePlayerStats(currentLevelNumber, stars, sessionTime);
            
            // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
            unlockAchievement('first_steps');
            
            // –ó–∞–≤–µ—Ä—à–∞–µ–º —É—Ä–æ–≤–µ–Ω—å
            completeLevel(currentLevelNumber);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
            setTimeout(() => {
                setShowNextLevelButton(true);
                if (hasNext) {
                    addLog('‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!');
                } else {
                    addLog('üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—Å–µ —É—Ä–æ–≤–Ω–∏ –ø—Ä–æ–π–¥–µ–Ω—ã!');
                }
            }, 2000);
            
            complete();
        } else {
            playSound('error');
            addLog('‚ùå –ö–æ–Ω—Ç—Ä–∞–∫—Ç –≤—Å—ë –µ—â—ë —É—è–∑–≤–∏–º!');
            addLog('üí° –î–æ–±–∞–≤—å—Ç–µ modifier onlyOwner() { require(msg.sender == owner, "Not owner"); _; }');
            addLog('üí° –ü—Ä–∏–º–µ–Ω–∏—Ç–µ modifier –∫ —Ñ—É–Ω–∫—Ü–∏—è–º withdraw –∏ emergency');
            addLog('üí° –í deposit() –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ balances[msg.sender] –≤–º–µ—Å—Ç–æ balances[to]');
        }
        
        setTimeout(() => {
            simulateAttacks();
        }, 2000);
    };

    const handleNextLevel = () => {
        goToNext(currentLevelNumber);
    };

    const handleBackToLevels = () => {
        goToNext(5); // –ü–µ—Ä–µ–¥–∞—ë–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å, —á—Ç–æ–±—ã –ø–æ–ø–∞—Å—Ç—å –≤ —Å–ø–∏—Å–æ–∫
    };

    return (
        <LevelView>
            <Widget
                windowMode
                title="üè¶ –£—Ä–æ–≤–µ–Ω—å 1: –ö–æ—à–µ–ª—ë–∫ –≤ –æ–ø–∞—Å–Ω–æ—Å—Ç–∏"
                icon={
                    <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="#e3e3e3">
                        <path d="M240-80q-50 0-85-35t-35-85v-120h120v-560l60-80h240l60 80v560h120v120q0 50-35 85t-85 35H240Z"/>
                    </svg>
                }
            >
                <div className="h-full w-full overflow-y-scroll relative pb-24">
                    <div className="absolute bottom-16 right-3 flex gap-2">
                        <div className={`px-3 py-1 rounded text-sm ${isSecure ? 'bg-green-600' : 'bg-red-600'}`}>
                            {isSecure ? 'üõ°Ô∏è –ó–∞—â–∏—â—ë–Ω' : '‚ö†Ô∏è –£—è–∑–≤–∏–º'}
                        </div>
                        
                        {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è */}
                        {showNextLevelButton ? (
                            hasNext ? (
                                <button
                                    className="px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700 animate-pulse"
                                    onClick={handleNextLevel}
                                >
                                    –°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å ‚Üí
                                </button>
                            ) : (
                                <button
                                    className="px-4 py-2 bg-purple-600 text-white rounded hover:bg-purple-700"
                                    onClick={handleBackToLevels}
                                >
                                    –ö —Å–ø–∏—Å–∫—É —É—Ä–æ–≤–Ω–µ–π
                                </button>
                            )
                        ) : (
                            <button
                                className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
                                onClick={handleCompile}
                                disabled={levelCompleted}
                            >
                                {levelCompleted ? '–í—ã–ø–æ–ª–Ω–µ–Ω–æ ‚úì' : '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å'}
                            </button>
                        )}
                    </div>

                    <div className="p-4">
                        <div className="text-2xl font-semibold">
                            üè¶ –ó–∞–¥–∞—á–∞ #1: –ö–æ—à–µ–ª—ë–∫ –≤ –æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                        </div>
                        <div className="mt-2 text-lg">
                            –ò—Å–ø—Ä–∞–≤—å—Ç–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –≤ —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ –∫–æ—à–µ–ª—å–∫–∞, —á—Ç–æ–±—ã –æ–±–µ—Å–ø–µ—á–∏—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤.
                        </div>

                        {/* –ü–∞–Ω–µ–ª—å —Å–æ—Å—Ç–æ—è–Ω–∏—è */}
                        <div className="mt-4 space-y-3">
                            {/* –ë–∞–ª–∞–Ω—Å */}
                            <div className={`p-3 border rounded ${balance > 800 ? 'bg-green-900/30 border-green-600' : 'bg-red-900/30 border-red-600'}`}>
                                <div className="font-semibold text-white">–ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞:</div>
                                <div className="text-2xl font-bold">üí∞ {balance} ETH</div>
                                {balance < 800 && (
                                    <div className="text-red-300 text-sm">‚ö†Ô∏è –°—Ä–µ–¥—Å—Ç–≤–∞ —É–∫—Ä–∞–¥–µ–Ω—ã —Ö–∞–∫–µ—Ä–∞–º–∏!</div>
                                )}
                            </div>

                            {/* –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ */}
                            {transactions.length > 0 && (
                                <div className="p-3 bg-gray-900/30 border border-gray-600 rounded max-h-32 overflow-y-auto">
                                    <div className="font-semibold text-gray-300">üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:</div>
                                    {transactions.map((tx, index) => (
                                        <div key={index} className="text-sm text-gray-400">{tx}</div>
                                    ))}
                                </div>
                            )}
                        </div>

                        {/* –°–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ */}
                        {levelCompleted && (
                            <div className="mt-4 p-3 bg-green-900/30 border border-green-600 rounded">
                                <div className="font-semibold text-green-300">üéâ –£—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–π–¥–µ–Ω!</div>
                                <div className="text-green-200">
                                    –û—Ç–ª–∏—á–Ω–æ! –ö–æ—à–µ–ª—ë–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏! 
                                    {hasNext ? " –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤—ã–∑–æ–≤—É!" : " –í—Å–µ —É—Ä–æ–≤–Ω–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!"}
                                </div>
                            </div>
                        )}

                        {/* –ü–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
                        {!levelCompleted && (
                            <div className="mt-4 p-3 bg-yellow-900/30 border border-yellow-600 rounded">
                                <div className="font-semibold text-yellow-300">üí° –ü–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:</div>
                                <div className="text-yellow-200 text-sm space-y-1 mt-2">
                                    <div>‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ modifier onlyOwner() —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π msg.sender == owner</div>
                                    <div>‚Ä¢ –ü—Ä–∏–º–µ–Ω–∏—Ç–µ onlyOwner –∫ —Ñ—É–Ω–∫—Ü–∏—è–º withdraw –∏ emergency</div>
                                    <div>‚Ä¢ –í deposit() –ø–æ–ø–æ–ª–Ω—è–π—Ç–µ –±–∞–ª–∞–Ω—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è: balances[msg.sender]</div>
                                    <div>‚Ä¢ –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ require() –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫</div>
                                </div>
                            </div>
                        )}

                        <div className="mt-6 h-[500px] flex flex-col gap-4">
                            <Editor
                                language="solidity"
                                theme="vs-dark"
                                value={code}
                                onChange={(value?: string) => setCode(value ?? '')}
                                options={{
                                    minimap: { enabled: false },
                                    fontSize: 14,
                                    readOnly: levelCompleted,
                                }}
                            />
                        </div>
                    </div>
                </div>
            </Widget>
        </LevelView>
    );
}
