'use client';

import { useEffect, useState } from 'react';
import Widget from '@/shared/ui/Widget';
import LevelView from '@/shared/ui/LevelView';
import { useConsole } from '@/features/model/useConsole';
import { Editor } from '@monaco-editor/react';
import { complete, run, spawnCactus } from '@/features/model/gameMechanics';
import { useLevelTransition } from '@/features/model/levelTransition';
import { useExtendedGameStore } from '@/features/model/useExtendedGameStore';
import { useSoundManager } from '@/features/model/useSoundManager';

export default function LevelFour() {
    const { addLog } = useConsole();
    const { completeLevel, goToNext, hasNextLevel } = useLevelTransition();
    const { initializePlayer, startGameSession, endGameSession, updatePlayerStats, unlockAchievement, setCurrentLevel } = useExtendedGameStore();
    const { playSound } = useSoundManager();

    const currentLevelNumber = 4;
    const hasNext = hasNextLevel(currentLevelNumber);

    const [code, setCode] = useState<string>(`// –°–æ–∑–¥–∞–π—Ç–µ DAO –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ—Å—Ç–≤–æ–º
pragma solidity ^0.8.0;

contract DefenderDAO {
    // TODO: –°–æ–∑–¥–∞–π—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É Proposal
    // struct Proposal { ... }
    
    mapping(address => uint256) public tokenBalance;
    mapping(uint256 => mapping(address => bool)) public hasVoted;
    
    Proposal[] public proposals;
    uint256 public proposalCount;
    
    constructor() {
        // –ù–∞—á–∞–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
        tokenBalance[0xAb8483F64d9C6d1EcF9b849Ae677dD3315835cb2] = 5; // –ê–ª–∏—Å–∞
        tokenBalance[0x4B20993Bc481177ec7E8f571ceCaE8A9e22C02db] = 3; // –ë–æ–±  
        tokenBalance[0x78731D3Ca6b7E34aC0F824c42a7cC18A495cabaB] = 2; // –ß–∞—Ä–ª–∏
    }
    
    function createProposal(string memory description) public {
        // TODO: –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å —Ç–∞–π–º–µ—Ä–æ–º
    }
    
    function vote(uint256 proposalId, bool support) public {
        // TODO: –†–µ–∞–ª–∏–∑—É–π—Ç–µ –≤–∑–≤–µ—à–µ–Ω–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
        // TODO: –£—á–∏—Ç—ã–≤–∞–π—Ç–µ –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤ –≥–æ–ª–æ—Å—É—é—â–µ–≥–æ
    }
    
    function executeProposal(uint256 proposalId) public {
        // TODO: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏—Å—Ç–µ—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
        // TODO: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
    }
}`);

    const [dao, setDao] = useState({
        members: [
            { address: "–ê–ª–∏—Å–∞", tokens: 5, voted: false },
            { address: "–ë–æ–±", tokens: 3, voted: false },
            { address: "–ß–∞—Ä–ª–∏", tokens: 2, voted: false }
        ],
        proposals: [
            { id: 1, description: "–£–≤–µ–ª–∏—á–∏—Ç—å –±—é–¥–∂–µ—Ç –Ω–∞ –∑–∞—â–∏—Ç—É", votesFor: 0, votesAgainst: 0, executed: false },
            { id: 2, description: "–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã—Ö –∑–∞—â–∏—Ç–Ω–∏–∫–æ–≤", votesFor: 0, votesAgainst: 0, executed: false }
        ]
    });

    const [showNextLevelButton, setShowNextLevelButton] = useState(false);
    const [levelCompleted, setLevelCompleted] = useState(false);
    const [daoActive, setDaoActive] = useState(false);

    useEffect(() => {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–≥—Ä–æ–∫–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        const name = document.cookie
            .split('; ')
            .find(row => row.startsWith('name='))
            ?.split('=')[1];
        
        if (name) {
            initializePlayer(decodeURIComponent(name));
        }
        
        setCurrentLevel(currentLevelNumber);
        startGameSession(currentLevelNumber);

        run();
        addLog('üèõÔ∏è –ú–∏—Å—Å–∏—è: –°–æ–∑–¥–∞–π—Ç–µ –¥–µ—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é –∞–≤—Ç–æ–Ω–æ–º–Ω—É—é –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é!');
        addLog('‚öñÔ∏è –†–µ–∞–ª–∏–∑—É–π—Ç–µ –≤–∑–≤–µ—à–µ–Ω–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –ø–æ —Ç–æ–∫–µ–Ω–∞–º');
        
        setTimeout(() => {
            spawnCactus();
        }, 1000);
    }, [initializePlayer, setCurrentLevel, startGameSession, addLog, currentLevelNumber]);

    const checkCode = () => {
        const hasStruct = code.includes('struct Proposal') && 
                         code.includes('description') && 
                         code.includes('votesFor') &&
                         code.includes('deadline');
        const hasCreateProposal = code.includes('proposals.push') && 
                                 code.includes('proposalCount++');
        const hasVote = code.includes('hasVoted') && 
                       code.includes('tokenBalance[msg.sender]') &&
                       code.includes('deadline');
        const hasExecute = code.includes('block.timestamp') && 
                          code.includes('executed = true');
        
        return hasStruct && hasCreateProposal && hasVote && hasExecute;
    };

    const simulateDAO = () => {
        addLog('üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ DAO –≥–æ—Ç–æ–≤—ã –∫ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—é:');
        dao.members.forEach(member => {
            addLog(`  ‚Ä¢ ${member.address}: ${member.tokens} —Ç–æ–∫–µ–Ω–æ–≤`);
        });

        // –°–∏–º—É–ª—è—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
        setTimeout(() => {
            dao.proposals.forEach((proposal, index) => {
                setTimeout(() => {
                    const forVotes = Math.floor(Math.random() * 8) + 2;
                    const againstVotes = Math.floor(Math.random() * 3);
                    const executed = forVotes > againstVotes;
                    
                    setDao(prev => ({
                        ...prev,
                        proposals: prev.proposals.map(p => 
                            p.id === proposal.id 
                                ? { ...p, votesFor: forVotes, votesAgainst: againstVotes, executed }
                                : p
                        )
                    }));
                    
                    addLog(`üó≥Ô∏è –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ #${proposal.id}:`);
                    addLog(`   ‚úÖ –ó–∞: ${forVotes} | ‚ùå –ü—Ä–æ—Ç–∏–≤: ${againstVotes}`);
                    if (executed) {
                        addLog(`   üéâ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!`);
                    }
                }, index * 3000);
            });
        }, 2000);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        setTimeout(() => {
            setDao(prev => ({
                ...prev,
                members: prev.members.map(m => ({ ...m, voted: true }))
            }));
        }, 1500);
    };

    const handleCompile = () => {
        addLog('üîç –ö–æ–º–ø–∏–ª—è—Ü–∏—è DAO –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞...');
        playSound('run');
        
        if (checkCode()) {
            playSound('success');
            addLog('‚úÖ DAO –∫–æ–Ω—Ç—Ä–∞–∫—Ç —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç!');
            addLog('üéâ –°–æ–≤–µ—Ç –∑–∞—â–∏—Ç–Ω–∏–∫–æ–≤ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!');
            setDaoActive(true);
            setLevelCompleted(true);
            
            // –ó–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä–æ–≤—É—é —Å–µ—Å—Å–∏—é
            endGameSession(true, 'excellent');
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞
            const stars = 3;
            const sessionTime = Date.now() - (Date.now() - 60000);
            updatePlayerStats(currentLevelNumber, stars, sessionTime);
            
            // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
            unlockAchievement('dao_architect');
            
            // –ó–∞–≤–µ—Ä—à–∞–µ–º —É—Ä–æ–≤–µ–Ω—å
            completeLevel(currentLevelNumber);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
            setTimeout(() => {
                setShowNextLevelButton(true);
                if (hasNext) {
                    addLog('‚û°Ô∏è –§–ò–ù–ê–õ–¨–ù–´–ô –£–†–û–í–ï–ù–¨ "–ò—Å–ø—ã—Ç–∞–Ω–∏–µ —Ö–∞–∫–µ—Ä–∞" —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!');
                    addLog('‚ö†Ô∏è –ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ —Å–µ—Ä—å—ë–∑–Ω–æ–º—É –≤—ã–∑–æ–≤—É!');
                } else {
                    addLog('üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—Å–µ —É—Ä–æ–≤–Ω–∏ –ø—Ä–æ–π–¥–µ–Ω—ã!');
                }
            }, 2000);
            
            simulateDAO();
            complete();
        } else {
            playSound('error');
            addLog('‚ùå DAO —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–∫–∏!');
            addLog('üí° –°–æ–∑–¥–∞–π—Ç–µ struct Proposal: description, votesFor, votesAgainst, deadline, executed');
            addLog('üí° –í createProposal(): proposals.push(Proposal(...)), proposalCount++');
            addLog('üí° –í vote(): require(!hasVoted[proposalId][msg.sender]), –ø—Ä–æ–≤–µ—Ä–∏—Ç—å deadline');
            addLog('üí° –í executeProposal(): –ø—Ä–æ–≤–µ—Ä–∏—Ç—å block.timestamp > deadline');
        }
    };

    const handleNextLevel = () => {
        goToNext(currentLevelNumber);
    };

    const handleBackToLevels = () => {
        goToNext(5); // –ü–µ—Ä–µ–¥–∞—ë–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å, —á—Ç–æ–±—ã –ø–æ–ø–∞—Å—Ç—å –≤ —Å–ø–∏—Å–æ–∫
    };

    return (
        <LevelView>
            <Widget
                windowMode
                title="–£—Ä–æ–≤–µ–Ω—å 4: DAO ‚Äî –°–æ–≤–µ—Ç –∑–∞—â–∏—Ç–Ω–∏–∫–æ–≤"
                icon={
                    <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="#e3e3e3">
                        <path d="M480-120q-151 0-255.5-46.5T120-280v-400q0-66 105.5-113T480-840q149 0 254.5 47T840-680v400q0 67-104.5 113.5T480-120Zm0-479q89 0 179-25.5T760-679q-11-29-100.5-55T480-760q-91 0-180.5 26T199-679q11 29 101 54.5T480-599Zm0 199q42 0 81-4t74.5-11.5q35.5-7.5 67-17.5t57.5-22v-120q-26 14-57.5 23.5t-67 17Q600-528 561-524t-81 4q-42 0-82-4t-75.5-11.5Q287-543 256-552.5T200-576v120q26 14 57.5 23.5t67 17Q360-408 399.5-404t80.5 4Zm0 200q46 0 93.5-7t84.5-18.5q37-11.5 67-26t32-29.5v-98q-26 14-57.5 23.5t-67 17Q600-328 561-324t-81 4q-42 0-82-4t-75.5-11.5Q287-343 256-352.5T200-376v99q2 12 32 27t67 26q37 11.5 84.5 18.5T480-200Z"/>
                    </svg>
                }
            >
                <div className="h-full w-full overflow-y-scroll relative pb-24">
                    <div className="absolute bottom-16 right-3 flex gap-2">
                        <div className={`px-3 py-1 rounded text-sm ${daoActive ? 'bg-green-600' : 'bg-blue-600'}`}>
                            {daoActive ? 'üèõÔ∏è DAO –∞–∫—Ç–∏–≤–Ω–∞' : 'üîí DAO –Ω–µ —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç–∞'}
                        </div>
                        
                        {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è */}
                        {showNextLevelButton ? (
                            hasNext ? (
                                <button
                                    className="px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700 animate-pulse"
                                    onClick={handleNextLevel}
                                >
                                    –§–∏–Ω–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å ‚Üí
                                </button>
                            ) : (
                                <button
                                    className="px-4 py-2 bg-purple-600 text-white rounded hover:bg-purple-700"
                                    onClick={handleBackToLevels}
                                >
                                    –ö —Å–ø–∏—Å–∫—É —É—Ä–æ–≤–Ω–µ–π
                                </button>
                            )
                        ) : (
                            <button
                                className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
                                onClick={handleCompile}
                                disabled={levelCompleted}
                            >
                                {levelCompleted ? '–í—ã–ø–æ–ª–Ω–µ–Ω–æ ‚úì' : '–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å DAO'}
                            </button>
                        )}
                    </div>

                    <div className="p-4">
                        <div className="text-2xl font-semibold">
                            üèõÔ∏è –ó–∞–¥–∞—á–∞ #4: DAO ‚Äî –°–æ–≤–µ—Ç –∑–∞—â–∏—Ç–Ω–∏–∫–æ–≤
                        </div>
                        <div className="mt-2 text-lg">
                            –°–æ–∑–¥–∞–π—Ç–µ –¥–µ—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é –∞–≤—Ç–æ–Ω–æ–º–Ω—É—é –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é —Å –≤–∑–≤–µ—à–µ–Ω–Ω—ã–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ–º –ø–æ —Ç–æ–∫–µ–Ω–∞–º.
                        </div>

                        {/* –°–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ */}
                        {levelCompleted && (
                            <div className="mt-4 p-3 bg-green-900/30 border border-green-600 rounded">
                                <div className="font-semibold text-green-300">üéâ –£—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–π–¥–µ–Ω!</div>
                                <div className="text-green-200">
                                    –ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ! –í—ã —Å–æ–∑–¥–∞–ª–∏ —Ä–∞–±–æ—Ç–∞—é—â—É—é DAO —Å –≤–∑–≤–µ—à–µ–Ω–Ω—ã–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ–º. 
                                    {hasNext ? " –§–∏–Ω–∞–ª—å–Ω–æ–µ –∏—Å–ø—ã—Ç–∞–Ω–∏–µ –∂–¥—ë—Ç –≤–∞—Å!" : " –í—Å–µ —É—Ä–æ–≤–Ω–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!"}
                                </div>
                            </div>
                        )}

                        {/* –ü–∞–Ω–µ–ª—å DAO */}
                        <div className="mt-4 p-3 bg-blue-900/30 border border-blue-600 rounded">
                            <div className="font-semibold text-blue-300">–°–æ—Å—Ç–æ—è–Ω–∏–µ DefenderDAO:</div>
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mt-2">
                                <div>
                                    <div className="text-sm font-medium">üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ ({dao.members.length}):</div>
                                    {dao.members.map((member, idx) => (
                                        <div key={idx} className={`text-xs p-2 rounded mt-1 ${
                                            member.voted ? 'bg-green-800/30 border border-green-600/30' : 'bg-gray-800/50'
                                        }`}>
                                            <div>{member.address}</div>
                                            <div>–¢–æ–∫–µ–Ω–æ–≤: {member.tokens}</div>
                                            <div className={member.voted ? 'text-green-300' : 'text-gray-400'}>
                                                {member.voted ? '‚úÖ –ü—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª' : '‚è≥ –û–∂–∏–¥–∞–µ—Ç'}
                                            </div>
                                        </div>
                                    ))}
                                </div>
                                <div>
                                    <div className="text-sm font-medium">üìã –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:</div>
                                    {dao.proposals.map((proposal) => (
                                        <div key={proposal.id} className={`text-xs p-2 rounded mt-1 ${
                                            proposal.executed 
                                                ? 'bg-green-800/30 border border-green-600/30' 
                                                : proposal.votesFor > 0 || proposal.votesAgainst > 0
                                                    ? 'bg-yellow-800/30 border border-yellow-600/30'
                                                    : 'bg-gray-800/30 border border-gray-600/30'
                                        }`}>
                                            <div className="font-medium">#{proposal.id}</div>
                                            <div>{proposal.description}</div>
                                            <div>–ó–∞: {proposal.votesFor} | –ü—Ä–æ—Ç–∏–≤: {proposal.votesAgainst}</div>
                                            <div className={proposal.executed ? 'text-green-300' : 'text-gray-400'}>
                                                {proposal.executed ? '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ' : '‚è≥ –û–∂–∏–¥–∞–µ—Ç'}
                                            </div>
                                        </div>
                                    ))}
                                </div>
                            </div>
                        </div>

                        {/* –ü–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ */}
                        {!levelCompleted && (
                            <div className="mt-4 p-3 bg-yellow-900/30 border border-yellow-600 rounded">
                                <div className="font-semibold text-yellow-300">üí° –ü–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏:</div>
                                <div className="text-yellow-200 text-sm space-y-1 mt-2">
                                    <div>‚Ä¢ –°–æ–∑–¥–∞–π—Ç–µ struct Proposal: description, votesFor, votesAgainst, deadline, executed</div>
                                    <div>‚Ä¢ –í createProposal(): proposals.push(Proposal(...)), proposalCount++</div>
                                    <div>‚Ä¢ –í vote(): require(!hasVoted[proposalId][msg.sender]), –ø—Ä–æ–≤–µ—Ä–∏—Ç—å deadline</div>
                                    <div>‚Ä¢ –í–∑–≤–µ—à–µ–Ω–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ: votesFor += tokenBalance[msg.sender]</div>
                                    <div>‚Ä¢ –í executeProposal(): –ø—Ä–æ–≤–µ—Ä–∏—Ç—å block.timestamp {'>'} deadline</div>
                                </div>
                            </div>
                        )}

                        <div className="mt-6 h-[500px] flex flex-col gap-4">
                            <Editor
                                language="solidity"
                                theme="vs-dark"
                                value={code}
                                onChange={(value?: string) => setCode(value ?? '')}
                                options={{
                                    minimap: { enabled: false },
                                    fontSize: 14,
                                    readOnly: levelCompleted, // –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                                }}
                            />
                        </div>
                    </div>
                </div>
            </Widget>
        </LevelView>
    );
}