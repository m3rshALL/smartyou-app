'use client';

import { useEffect, useState } from 'react';
import { useConsole } from '@/features/model/useConsole';
import { complete, run, spawnCactus } from '@/features/model/gameMechanics';
import { useLevelTransition } from '@/features/model/levelTransition';
import { useExtendedGameStore } from '@/features/model/useExtendedGameStore';
import { useSoundManager } from '@/features/model/useSoundManager';
import LevelView from '@/shared/ui/LevelView';
import Widget from '@/shared/ui/Widget';
import MonacoEditor from '@/features/ui/MonacoEditor';

export default function LevelTwo() {
    const { addLog } = useConsole();
    const { completeLevel, hasNextLevel } = useLevelTransition();
    const { initializePlayer, startGameSession, endGameSession, updatePlayerStats, unlockAchievement, setCurrentLevel } = useExtendedGameStore();
    const { playSound } = useSoundManager();
    const [levelCompleted, setLevelCompleted] = useState(false);

    const currentLevelNumber = 2;
    const hasNext = hasNextLevel(currentLevelNumber);

    useEffect(() => {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–≥—Ä–æ–∫–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        const name = document.cookie
            .split('; ')
            .find(row => row.startsWith('name='))
            ?.split('=')[1];
        
        if (name) {
            initializePlayer(decodeURIComponent(name));
        }
        
        setCurrentLevel(currentLevelNumber);
        startGameSession(currentLevelNumber);
        
        run();
        addLog('üéØ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —É—Ä–æ–≤–µ–Ω—å 2!');
        addLog('üó≥Ô∏è –¶–µ–ª—å: –°–æ–∑–¥–∞–π—Ç–µ —Å–∏—Å—Ç–µ–º—É –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è');
        addLog('üí° –ü–æ–¥—Å–∫–∞–∑–∫–∏:');
        addLog('‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ mapping –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤');
        addLog('‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ —Ñ—É–Ω–∫—Ü–∏–∏ vote() –∏ getVotes()');
        addLog('‚Ä¢ –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ –∑–∞—â–∏—Ç—É –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è');
        
        setTimeout(() => {
            spawnCactus();
        }, 1000);
    }, [initializePlayer, setCurrentLevel, startGameSession, addLog, currentLevelNumber]);

    const handleSuccess = () => {
        if (levelCompleted) return;
        
        setLevelCompleted(true);
        playSound('success');
        addLog('‚úÖ –ö–æ–Ω—Ç—Ä–∞–∫—Ç –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç!');
        addLog('üó≥Ô∏è –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å mapping!');
        addLog('üíª –£—Ä–æ–≤–µ–Ω—å 2 –ø—Ä–æ–π–¥–µ–Ω!');
        
        // –ó–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä–æ–≤—É—é —Å–µ—Å—Å–∏—é
        endGameSession(true, 'excellent');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞
        const stars = 3;
        const sessionTime = Date.now() - (Date.now() - 80000);
        updatePlayerStats(currentLevelNumber, stars, sessionTime);
        
        // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
        unlockAchievement('voting_master');
        
        // –ó–∞–≤–µ—Ä—à–∞–µ–º —É—Ä–æ–≤–µ–Ω—å
        completeLevel(currentLevelNumber);
        
        complete();
        
        setTimeout(() => {
            if (hasNext) {
                addLog('‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!');
                addLog('üí° –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª "–£—Ä–æ–≤–Ω–∏" –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è');
            }
        }, 2000);
    };

    return (
        <LevelView>
            <div className="flex flex-col gap-3">
                {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Ä–æ–≤–Ω–µ */}
                <Widget 
                    title="üó≥Ô∏è –£—Ä–æ–≤–µ–Ω—å 2: –°–∏—Å—Ç–µ–º–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è" 
                    icon="üìä"
                >
                    <div className="space-y-3">
                        <p className="text-gray-300">
                            –ò–∑—É—á–∏—Ç–µ mapping –∏ —Å–æ–∑–¥–∞–π—Ç–µ –¥–µ—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è. 
                            –≠—Ç–æ –≤–∞—à –ø–µ—Ä–≤—ã–π —à–∞–≥ –∫ –ø–æ–Ω–∏–º–∞–Ω–∏—é –¥–µ–º–æ–∫—Ä–∞—Ç–∏–∏ –≤ –±–ª–æ–∫—á–µ–π–Ω–µ!
                        </p>
                        
                        <div className="bg-green-900/30 border border-green-500/50 rounded-lg p-3">
                            <h4 className="text-green-400 font-semibold mb-2">üéØ –ó–∞–¥–∞—á–∏:</h4>
                            <ul className="text-sm text-gray-300 space-y-1">
                                <li>‚Ä¢ –°–æ–∑–¥–∞–π—Ç–µ mapping –¥–ª—è –≥–æ–ª–æ—Å–æ–≤ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤</li>
                                <li>‚Ä¢ –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é vote() —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏</li>
                                <li>‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é getVotes() –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞</li>
                                <li>‚Ä¢ –†–∞–∑–≤–µ—Ä–Ω–∏—Ç–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è</li>
                            </ul>
                        </div>

                        {levelCompleted && (
                            <div className="bg-green-900/30 border border-green-500/50 rounded-lg p-3 text-center">
                                <div className="text-green-400 font-semibold">
                                    üéâ –£—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–π–¥–µ–Ω! üéâ
                                </div>
                                <div className="text-green-300 text-sm mt-1">
                                    –í—ã —Å–æ–∑–¥–∞–ª–∏ –¥–µ—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ!
                                </div>
                            </div>
                        )}
                    </div>
                </Widget>

                {/* Monaco Editor –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ */}
                <Widget 
                    title="üíª Monaco Editor" 
                    icon="‚öíÔ∏è"
                    className="flex-1"
                >
                    <MonacoEditor 
                        onContractDeployed={() => {
                            // –ü—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
                            handleSuccess();
                        }}
                        defaultValue={`// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract VotingSystem {
    // –°–æ–∑–¥–∞–π—Ç–µ mapping –¥–ª—è –≥–æ–ª–æ—Å–æ–≤ –∏ —Ñ—É–Ω–∫—Ü–∏–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
    
}`}
                    />
                </Widget>
            </div>
        </LevelView>
    );
}
