'use client';

import { useEffect, useState } from 'react';
import Widget from '@/shared/ui/Widget';
import LevelView from '@/shared/ui/LevelView';
import { useConsole } from '@/features/model/useConsole';
import { useCompletedLevels } from '@/features/model/useLevels';
import { Editor } from '@monaco-editor/react';
import { complete, run, spawnCactus } from '@/features/model/gameMechanics';
import { useRouter } from 'next/navigation';

export default function LevelTwo() {
    const router = useRouter();
    const { addLog } = useConsole();
    const { setCompletedLevels, completedLevels } = useCompletedLevels();

    const [code, setCode] = useState<string>(`// –°–æ–∑–¥–∞–π—Ç–µ —Å–∏—Å—Ç–µ–º—É –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è DAO
pragma solidity ^0.8.0;

contract Voting {
    address public owner;
    mapping(address => bool) public hasVoted;
    mapping(string => uint256) public votes;
    
    string[] public candidates;
    
    constructor() {
        owner = msg.sender;
        candidates = ["Alice", "Bob", "Charlie"];
    }
    
    // TODO: –î–æ–±–∞–≤—å—Ç–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä onlyRegistered 
    
    function vote(string memory candidate) public {
        // TODO: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª
        // TODO: –û—Ç–º–µ—Ç—å—Ç–µ, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª
        votes[candidate]++;
    }
    
    function getVotes(string memory candidate) public view returns (uint256) {
        return votes[candidate];
    }
}`);

    const [votingResults, setVotingResults] = useState<Record<string, number>>({
        Alice: 0,
        Bob: 0,
        Charlie: 0
    });
    const [voters, setVoters] = useState<string[]>([]);

    useEffect(() => {
        if (completedLevels < 1) {
            router.push('/levels/');
            return;
        }

        run();
        addLog('üó≥Ô∏è –ú–∏—Å—Å–∏—è: –°–æ–∑–¥–∞–π—Ç–µ –±–µ–∑–æ–ø–∞—Å–Ω—É—é —Å–∏—Å—Ç–µ–º—É –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è!');
        addLog('‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –Ω—É–∂–Ω–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ');
        
        setTimeout(() => {
            spawnCactus();
        }, 1000);
    }, [completedLevels]);

    if (completedLevels < 1) {
        return <></>;
    }

    const checkCode = () => {
        const hasRequire = code.includes('require(!hasVoted[msg.sender]') || 
                            code.includes('require(hasVoted[msg.sender] == false');
        const hasVotedUpdate = code.includes('hasVoted[msg.sender] = true');
        
        return hasRequire && hasVotedUpdate;
    };

    const processVote = (voter: string, candidate: string) => {
        if (voters.includes(voter)) {
            addLog(`‚ùå ${voter} –ø—ã—Ç–∞–µ—Ç—Å—è –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ!`);
        } else {
            setVoters(prev => [...prev, voter]);
            setVotingResults(prev => ({
                ...prev,
                [candidate]: prev[candidate] + 1
            }));
            addLog(`‚úÖ ${voter} –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª –∑–∞ ${candidate}`);
        }
    };

    const scheduleVote = (voter: string, index: number, candidates: string[]) => {
        setTimeout(() => {
            const candidate = candidates[Math.floor(Math.random() * candidates.length)];
            processVote(voter, candidate);
        }, index * 1000);
    };

    const simulateVoting = () => {
        const testVoters = ["–ü—ë—Ç—Ä", "–ê–Ω–Ω–∞", "–ú–∞–∫—Å–∏–º"];
        const candidates = ["Alice", "Bob", "Charlie"];
        
        testVoters.forEach((voter, index) => {
            scheduleVote(voter, index, candidates);
        });
    };

    const handleCompile = () => {
        addLog('üîç –ö–æ–º–ø–∏–ª—è—Ü–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è...');
        
        if (checkCode()) {
            addLog('‚úÖ –ö–æ–Ω—Ç—Ä–∞–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω!');
            addLog('üéâ –°–∏—Å—Ç–µ–º–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∑–∞—â–∏—â–µ–Ω–∞ –æ—Ç –∑–ª–æ—É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–π!');
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            if (completedLevels < 2) {
                setCompletedLevels(2);
                addLog('üèÜ –ü–æ–ª—É—á–µ–Ω–æ –∑–≤–∞–Ω–∏–µ: "–ó–∞—â–∏—Ç–Ω–∏–∫ –¥–µ–º–æ–∫—Ä–∞—Ç–∏–∏"');
                addLog('üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω —Ä–µ–∂–∏–º "–£—á–µ–±–Ω–æ–µ DAO"');
            }
            
            simulateVoting();
            complete();
        } else {
            addLog('‚ùå –í –∫–æ–¥–µ –µ—Å—Ç—å —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏!');
            addLog('üí° –î–æ–±–∞–≤—å—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É require(!hasVoted[msg.sender], "Already voted")');
            addLog('üí° –ù–µ –∑–∞–±—É–¥—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å hasVoted[msg.sender] = true');
        }
    };

    return (
        <LevelView>
            <Widget
                windowMode
                title="–£—Ä–æ–≤–µ–Ω—å 2: –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ"
                icon={
                    <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="#e3e3e3">
                        <path d="m424-296 282-282-56-56-226 226-114-114-56 56 170 170Zm56 216q-83 0-156-31.5T197-197q-54-54-85.5-127T80-480q0-83 31.5-156T197-763q54-54 127-85.5T480-880q83 0 156 31.5T763-763q54 54 85.5 127T880-480q0 83-31.5 156T763-197q-54 54-127 85.5T480-80Z"/>
                    </svg>
                }
            >
                <div className="h-full w-full overflow-y-scroll relative pb-24">
                    <div className="absolute bottom-16 right-3">
                        <button
                            className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
                            onClick={handleCompile}
                        >
                            –ó–∞–ø—É—Å—Ç–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
                        </button>
                    </div>

                    <div className="p-4">
                        <div className="text-2xl font-semibold">
                            üó≥Ô∏è –ó–∞–¥–∞—á–∞ #2: –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
                        </div>
                        <div className="mt-2 text-lg">
                            –°–æ–∑–¥–∞–π—Ç–µ –±–µ–∑–æ–ø–∞—Å–Ω—É—é —Å–∏—Å—Ç–µ–º—É –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ.
                        </div>

                        {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è */}
                        <div className="mt-4 p-3 bg-blue-900/30 border border-blue-600 rounded">
                            <div className="font-semibold text-blue-300">–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:</div>
                            <div className="grid grid-cols-3 gap-2 mt-2">
                                {Object.entries(votingResults).map(([candidate, votes]) => (
                                    <div key={candidate} className="text-center">
                                        <div className="font-semibold">{candidate}</div>
                                        <div className="text-blue-200">{votes} –≥–æ–ª–æ—Å–æ–≤</div>
                                    </div>
                                ))}
                            </div>
                        </div>

                        <div className="mt-6 h-[500px] flex flex-col gap-4">
                            <Editor
                                language="solidity"
                                theme="vs-dark"
                                value={code}
                                onChange={(value?: string) => setCode(value ?? '')}
                                options={{
                                    minimap: { enabled: false },
                                    fontSize: 14,
                                }}
                            />
                        </div>
                    </div>
                </div>
            </Widget>
        </LevelView>
    );
}