'use client';

import { useEffect, useState } from 'react';
import Widget from '@/shared/ui/Widget';
import LevelView from '@/shared/ui/LevelView';
import { useConsole } from '@/features/model/useConsole';
import { Editor } from '@monaco-editor/react';
import { complete, run, spawnCactus } from '@/features/model/gameMechanics';
import { useLevelTransition } from '@/features/model/levelTransition';
import { useExtendedGameStore } from '@/features/model/useExtendedGameStore';
import { useSoundManager } from '@/features/model/useSoundManager';

export default function LevelFive() {
    const { addLog } = useConsole();
    const { completeLevel } = useLevelTransition();
    const { initializePlayer, startGameSession, endGameSession, updatePlayerStats, unlockAchievement, setCurrentLevel } = useExtendedGameStore();
    const { playSound } = useSoundManager();

    const currentLevelNumber = 5;

    const [code, setCode] = useState<string>(`// –ó–∞—â–∏—Ç–∏—Ç–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç –æ—Ç —Ä–µ–µ–Ω—Ç—Ä–∞–Ω—Å–∏ –∞—Ç–∞–∫
pragma solidity ^0.8.0;

contract VulnerableBank {
    mapping(address => uint256) public balances;
    
    function deposit() public payable {
        balances[msg.sender] += msg.value;
    }
    
    function withdraw(uint256 amount) public {
        require(balances[msg.sender] >= amount, "Insufficient balance");
        
        // –£–Ø–ó–í–ò–ú–û–°–¢–¨: –ø–µ—Ä–µ–≤–æ–¥ –¥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞!
        (bool success, ) = msg.sender.call{value: amount}("");
        require(success, "Transfer failed");
        
        balances[msg.sender] -= amount;
    }
    
    function getBalance() public view returns (uint256) {
        return address(this).balance;
    }
}`);

    const [securityStatus, setSecurityStatus] = useState({
        reentrancyFixed: false,
        attackBlocked: false,
        fundsSecure: false
    });

    const [showCompletionButton, setShowCompletionButton] = useState(false);
    const [levelCompleted, setLevelCompleted] = useState(false);
    const [hackingInProgress, setHackingInProgress] = useState(false);
    const [attackAttempts, setAttackAttempts] = useState(0);

    useEffect(() => {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–≥—Ä–æ–∫–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        const name = document.cookie
            .split('; ')
            .find(row => row.startsWith('name='))
            ?.split('=')[1];
        
        if (name) {
            initializePlayer(decodeURIComponent(name));
        }
        
        setCurrentLevel(currentLevelNumber);
        startGameSession(currentLevelNumber);

        run();
        addLog('üõ°Ô∏è –§–ò–ù–ê–õ–¨–ù–ê–Ø –ú–ò–°–°–ò–Ø: –ó–∞—â–∏—Ç–∏—Ç–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç –æ—Ç —Ö–∞–∫–µ—Ä—Å–∫–æ–π –∞—Ç–∞–∫–∏!');
        addLog('‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —É—è–∑–≤–∏–º–æ—Å—Ç—å —Ä–µ–µ–Ω—Ç—Ä–∞–Ω—Å–∏ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ withdraw()');
        
        setTimeout(() => {
            spawnCactus();
        }, 1000);

        // –°–∏–º—É–ª—è—Ü–∏—è –∞—Ç–∞–∫ —Ö–∞–∫–µ—Ä–æ–≤
        const attackInterval = setInterval(() => {
            if (!levelCompleted) {
                setAttackAttempts(prev => prev + 1);
                const attacks = [
                    "üî¥ –ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–µ–Ω—Ç—Ä–∞–Ω—Å–∏ –∞—Ç–∞–∫–∏!",
                    "üî¥ –•–∞–∫–µ—Ä –ø—ã—Ç–∞–µ—Ç—Å—è –≤—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞!",
                    "üî¥ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞ –¥–≤–æ–π–Ω–æ–≥–æ —Ä–∞—Å—Ö–æ–¥–æ–≤–∞–Ω–∏—è!",
                    "üî¥ –ê—Ç–∞–∫–∞ –Ω–∞ —Ñ—É–Ω–∫—Ü–∏—é withdraw()!"
                ];
                const randomAttack = attacks[Math.floor(Math.random() * attacks.length)];
                addLog(randomAttack);
                
                if (Math.random() > 0.7) {
                    setHackingInProgress(true);
                    setTimeout(() => setHackingInProgress(false), 2000);
                }
            }
        }, 5000);

        return () => clearInterval(attackInterval);
    }, [initializePlayer, setCurrentLevel, startGameSession, addLog, currentLevelNumber, levelCompleted]);

    const checkCode = () => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –æ–ø–µ—Ä–∞—Ü–∏–π (CEI pattern)
        const ceiPattern = code.includes('balances[msg.sender] -= amount') && 
                          code.indexOf('balances[msg.sender] -= amount') < code.indexOf('call{value: amount}');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ ReentrancyGuard –∏–ª–∏ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ–π –∑–∞—â–∏—Ç—ã
        const hasReentrancyGuard = code.includes('nonReentrant') || 
                                  code.includes('ReentrancyGuard') || 
                                  ceiPattern;

        return {
            reentrancyFixed: hasReentrancyGuard,
            attackBlocked: hasReentrancyGuard,
            fundsSecure: hasReentrancyGuard
        };
    };

    const simulateSecureOperations = () => {
        addLog('üõ°Ô∏è –ö–æ–Ω—Ç—Ä–∞–∫—Ç –∑–∞—â–∏—â—ë–Ω! –•–∞–∫–µ—Ä—Å–∫–∏–µ –∞—Ç–∞–∫–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã!');
        addLog('‚úÖ –†–µ–µ–Ω—Ç—Ä–∞–Ω—Å–∏ –∞—Ç–∞–∫–∞ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∞');
        addLog('üí∞ –°—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏');
        addLog('üèÜ –ö–£–†–° –ó–ê–í–ï–†–®–Å–ù! –í—ã –Ω–∞—Å—Ç–æ—è—â–∏–π –º–∞—Å—Ç–µ—Ä Solidity!');
        
        // –ü–æ–∫–∞–∑–∞—Ç—å —É—Å–ø–µ—à–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        const secureOps = [
            "‚úÖ –î–µ–ø–æ–∑–∏—Ç: 10 ETH –±–µ–∑–æ–ø–∞—Å–Ω–æ —Ä–∞–∑–º–µ—â—ë–Ω",
            "‚úÖ –í—ã–≤–æ–¥: 3 ETH —É—Å–ø–µ—à–Ω–æ –≤—ã–≤–µ–¥–µ–Ω",
            "‚úÖ –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞",
            "‚úÖ –í—Å–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ–¥ –∑–∞—â–∏—Ç–æ–π"
        ];

        secureOps.forEach((op, index) => {
            setTimeout(() => {
                addLog(op);
            }, index * 1500);
        });
    };

    const handleCompile = () => {
        addLog('üîç –ê–Ω–∞–ª–∏–∑ –∑–∞—â–∏—Ç—ã –æ—Ç —Ä–µ–µ–Ω—Ç—Ä–∞–Ω—Å–∏...');
        playSound('run');
        
        const analysis = checkCode();
        setSecurityStatus(analysis);
        
        if (analysis.reentrancyFixed) {
            playSound('success');
            addLog('‚úÖ –ê–¢–ê–ö–ê –û–¢–†–ê–ñ–ï–ù–ê! –ö–æ–Ω—Ç—Ä–∞–∫—Ç –∑–∞—â–∏—â—ë–Ω!');
            addLog('üéâ –•–∞–∫–µ—Ä –Ω–µ —Å–º–æ–≥ —É–∫—Ä–∞—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞!');
            setLevelCompleted(true);
            
            // –ó–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä–æ–≤—É—é —Å–µ—Å—Å–∏—é
            endGameSession(true, 'excellent');
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞
            const stars = 3;
            const sessionTime = Date.now() - (Date.now() - 80000);
            updatePlayerStats(currentLevelNumber, stars, sessionTime);
            
            // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
            unlockAchievement('security_expert');
            
            // –ó–∞–≤–µ—Ä—à–∞–µ–º —É—Ä–æ–≤–µ–Ω—å
            completeLevel(currentLevelNumber);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
            setTimeout(() => {
                setShowCompletionButton(true);
            }, 3000);
            
            simulateSecureOperations();
            complete();
        } else {
            playSound('error');
            addLog('‚ùå –ö–æ–Ω—Ç—Ä–∞–∫—Ç –≤—Å—ë –µ—â—ë —É—è–∑–≤–∏–º!');
            addLog('üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞—Ç—Ç–µ—Ä–Ω CEI: –ü—Ä–æ–≤–µ—Ä–∫–∞ ‚Üí –≠—Ñ—Ñ–µ–∫—Ç ‚Üí –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ');
            addLog('üí° –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç–µ balances[msg.sender] -= amount –ü–ï–†–ï–î –≤—ã–∑–æ–≤–æ–º call');
            addLog('üí° –ò–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ modifier nonReentrant');
        }
    };

    const handleGameCompleted = () => {
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —ç–∫—Ä–∞–Ω—É –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        window.location.href = '/achievements';
    };

    return (
        <LevelView>
            <Widget
                windowMode
                title="–£—Ä–æ–≤–µ–Ω—å 5: –ò—Å–ø—ã—Ç–∞–Ω–∏–µ —Ö–∞–∫–µ—Ä–∞"
                icon={
                    <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="#e3e3e3">
                        <path d="M240-80q-33 0-56.5-23.5T160-160v-400q0-33 23.5-56.5T240-640h40v-80q0-83 58.5-141.5T480-920q83 0 141.5 58.5T680-680v80h40q33 0 56.5 23.5T800-520v360q0 33-23.5 56.5T720-80H240Zm0-80h480v-360H240v360Zm120-180q0 17 11.5 28.5T400-300q17 0 28.5-11.5T440-340q0-17-11.5-28.5T400-380q-17 0-28.5 11.5T360-340Zm120 0q0 17 11.5 28.5T520-300q17 0 28.5-11.5T560-340q0-17-11.5-28.5T520-380q-17 0-28.5 11.5T480-340ZM360-640h240v-80q0-50-35-85t-85-35q-50 0-85 35t-35 85v80Z"/>
                    </svg>
                }
            >
                <div className="h-full w-full overflow-y-scroll relative pb-24">
                    <div className="absolute bottom-16 right-3 flex gap-2">
                        <div className={`px-3 py-1 rounded text-sm ${
                            levelCompleted ? 'bg-green-600' : hackingInProgress ? 'bg-red-600 animate-pulse' : 'bg-yellow-600'
                        }`}>
                            {levelCompleted ? 'üõ°Ô∏è –ó–∞—â–∏—â—ë–Ω' : hackingInProgress ? 'üî¥ –ê—Ç–∞–∫–∞!' : `‚ö†Ô∏è ${attackAttempts} –ø–æ–ø—ã—Ç–æ–∫`}
                        </div>
                        
                        {showCompletionButton ? (
                            <button
                                className="px-4 py-2 bg-purple-600 text-white rounded hover:bg-purple-700 animate-pulse"
                                onClick={handleGameCompleted}
                            >
                                üèÜ –ö—É—Ä—Å –∑–∞–≤–µ—Ä—à—ë–Ω!
                            </button>
                        ) : (
                            <button
                                className="px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700"
                                onClick={handleCompile}
                                disabled={levelCompleted}
                            >
                                {levelCompleted ? '–í—ã–ø–æ–ª–Ω–µ–Ω–æ ‚úì' : '–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∑–∞—â–∏—Ç—É'}
                            </button>
                        )}
                    </div>

                    <div className="p-4">
                        <div className="text-2xl font-semibold">
                            üõ°Ô∏è –§–∏–Ω–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å: –ò—Å–ø—ã—Ç–∞–Ω–∏–µ —Ö–∞–∫–µ—Ä–∞
                        </div>
                        <div className="mt-2 text-lg">
                            –ó–∞—â–∏—Ç–∏—Ç–µ –±–∞–Ω–∫–æ–≤—Å–∫–∏–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç –æ—Ç —Ä–µ–µ–Ω—Ç—Ä–∞–Ω—Å–∏ –∞—Ç–∞–∫–∏. –≠—Ç–æ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –∏—Å–ø—ã—Ç–∞–Ω–∏–µ!
                        </div>

                        {/* –°–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ */}
                        {levelCompleted && (
                            <div className="mt-4 p-3 bg-green-900/30 border border-green-600 rounded">
                                <div className="font-semibold text-green-300">üèÜ –ö–£–†–° –ó–ê–í–ï–†–®–Å–ù!</div>
                                <div className="text-green-200">
                                    –ü–†–ï–í–û–°–•–û–î–ù–û! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—â–∏—Ç–∏–ª–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç –æ—Ç —Ö–∞–∫–µ—Ä—Å–∫–æ–π –∞—Ç–∞–∫–∏ –∏ —Å—Ç–∞–ª–∏ –Ω–∞—Å—Ç–æ—è—â–∏–º –º–∞—Å—Ç–µ—Ä–æ–º Solidity!
                                </div>
                            </div>
                        )}

                        {/* –ü–∞–Ω–µ–ª—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ */}
                        <div className="mt-4 p-3 bg-red-900/30 border border-red-600 rounded">
                            <div className="font-semibold text-red-300">üö® –°—Ç–∞—Ç—É—Å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞:</div>
                            <div className="grid grid-cols-1 gap-2 mt-2">
                                <div className={`flex items-center justify-between p-2 rounded text-sm ${
                                    securityStatus.reentrancyFixed 
                                        ? 'bg-green-800/30 border border-green-600/30' 
                                        : 'bg-red-800/30 border border-red-600/30'
                                }`}>
                                    <span>–ó–∞—â–∏—Ç–∞ –æ—Ç —Ä–µ–µ–Ω—Ç—Ä–∞–Ω—Å–∏</span>
                                    <span className={securityStatus.reentrancyFixed ? 'text-green-300' : 'text-red-300'}>
                                        {securityStatus.reentrancyFixed ? '‚úÖ –ê–∫—Ç–∏–≤–Ω–∞' : 'üî¥ –£—è–∑–≤–∏–º–æ'}
                                    </span>
                                </div>
                                
                                <div className={`flex items-center justify-between p-2 rounded text-sm ${
                                    securityStatus.attackBlocked 
                                        ? 'bg-green-800/30 border border-green-600/30' 
                                        : 'bg-red-800/30 border border-red-600/30'
                                }`}>
                                    <span>–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∞—Ç–∞–∫</span>
                                    <span className={securityStatus.attackBlocked ? 'text-green-300' : 'text-red-300'}>
                                        {securityStatus.attackBlocked ? '‚úÖ –ê–∫—Ç–∏–≤–Ω–∞' : 'üî¥ –û—Ç–∫–ª—é—á–µ–Ω–∞'}
                                    </span>
                                </div>
                                
                                <div className={`flex items-center justify-between p-2 rounded text-sm ${
                                    securityStatus.fundsSecure 
                                        ? 'bg-green-800/30 border border-green-600/30' 
                                        : 'bg-red-800/30 border border-red-600/30'
                                }`}>
                                    <span>–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤</span>
                                    <span className={securityStatus.fundsSecure ? 'text-green-300' : 'text-red-300'}>
                                        {securityStatus.fundsSecure ? '‚úÖ –ó–∞—â–∏—â–µ–Ω—ã' : 'üî¥ –í –æ–ø–∞—Å–Ω–æ—Å—Ç–∏'}
                                    </span>
                                </div>
                            </div>
                            
                            {attackAttempts > 0 && !levelCompleted && (
                                <div className="mt-3 text-center">
                                    <div className="text-red-200 text-sm animate-pulse">
                                        ‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {attackAttempts} –ø–æ–ø—ã—Ç–æ–∫ –≤–∑–ª–æ–º–∞!
                                    </div>
                                </div>
                            )}
                        </div>

                        {/* –ü–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
                        {!levelCompleted && (
                            <div className="mt-4 p-3 bg-yellow-900/30 border border-yellow-600 rounded">
                                <div className="font-semibold text-yellow-300">üîß –ü–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –∑–∞—â–∏—Ç—ã:</div>
                                <div className="text-yellow-200 text-sm space-y-1 mt-2">
                                    <div>‚Ä¢ üõ°Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞—Ç—Ç–µ—Ä–Ω CEI: –ü—Ä–æ–≤–µ—Ä–∫–∞ ‚Üí –≠—Ñ—Ñ–µ–∫—Ç ‚Üí –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ</div>
                                    <div>‚Ä¢ üí° –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç–µ balances[msg.sender] -= amount –ü–ï–†–ï–î –≤—ã–∑–æ–≤–æ–º call</div>
                                    <div>‚Ä¢ üí° –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ modifier nonReentrant</div>
                                    <div>‚Ä¢ üí° –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ ReentrancyGuard –∏–∑ OpenZeppelin</div>
                                    <div>‚Ä¢ ‚ö†Ô∏è –ó–∞—â–∏—Ç–∏—Ç–µ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤ withdraw() –≤ –æ–¥–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏</div>
                                </div>
                            </div>
                        )}

                        <div className="mt-6 h-[500px] flex flex-col gap-4">
                            <Editor
                                language="solidity"
                                theme="vs-dark"
                                value={code}
                                onChange={(value?: string) => setCode(value ?? '')}
                                options={{
                                    minimap: { enabled: false },
                                    fontSize: 14,
                                    readOnly: levelCompleted, // –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                                }}
                            />
                        </div>
                    </div>
                </div>
            </Widget>
        </LevelView>
    );
}