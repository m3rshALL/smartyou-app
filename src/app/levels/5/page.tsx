'use client';

import { useEffect, useState } from 'react';
import Widget from '@/shared/ui/Widget';
import LevelView from '@/shared/ui/LevelView';
import { useConsole } from '@/features/model/useConsole';
import { useLevelTransition } from '@/features/model/levelTransition';
import { Editor } from '@monaco-editor/react';
import { complete, run, spawnCactus } from '@/features/model/gameMechanics';
import { useRouter } from 'next/navigation';

export default function LevelFive() {
    const router = useRouter();
    const { addLog } = useConsole();
    const { completeLevel } = useLevelTransition();

    const [code, setCode] = useState<string>(`// –ó–∞—â–∏—Ç–∏—Ç–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç –æ—Ç —Ä–µ–µ–Ω—Ç—Ä–∞–Ω—Å–∏ –∞—Ç–∞–∫
pragma solidity ^0.8.0;

contract VulnerableBank {
    mapping(address => uint256) public balances;
    
    function deposit() public payable {
        balances[msg.sender] += msg.value;
    }
    
    function withdraw(uint256 amount) public {
        require(balances[msg.sender] >= amount, "Insufficient balance");
        
        // –£–Ø–ó–í–ò–ú–û–°–¢–¨: –ø–µ—Ä–µ–≤–æ–¥ –¥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞!
        (bool success, ) = msg.sender.call{value: amount}("");
        require(success, "Transfer failed");
        
        balances[msg.sender] -= amount;
    }
    
    function getBalance() public view returns (uint256) {
        return address(this).balance;
    }
}`);

    const [contractBalance, setContractBalance] = useState(1000);
    const [attackInProgress, setAttackInProgress] = useState(false);
    const [isSecure, setIsSecure] = useState(false);
    const [gameCompleted, setGameCompleted] = useState(false);

    useEffect(() => {
        run();
        addLog('üõ°Ô∏è –§–ò–ù–ê–õ–¨–ù–ê–Ø –ú–ò–°–°–ò–Ø: –ó–∞—â–∏—Ç–∏—Ç–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç –æ—Ç —Ö–∞–∫–µ—Ä—Å–∫–æ–π –∞—Ç–∞–∫–∏!');
        addLog('‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —É—è–∑–≤–∏–º–æ—Å—Ç—å —Ä–µ–µ–Ω—Ç—Ä–∞–Ω—Å–∏ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ withdraw()');
        
        setTimeout(() => {
            spawnCactus();
        }, 1000);
    }, []);

    const checkSecurity = () => {
        const hasBalanceUpdateBeforeTransfer = code.indexOf('balances[msg.sender] -= amount') < 
                                              code.indexOf('call{value: amount}');
        const hasReentrancyGuard = code.includes('nonReentrant') || 
                                  code.includes('_status') ||
                                  code.includes('require(!locked');
        const hasOpenZeppelin = code.includes('ReentrancyGuard');
        
        return hasBalanceUpdateBeforeTransfer || hasReentrancyGuard || hasOpenZeppelin;
    };

    const simulateAttack = () => {
        setAttackInProgress(true);
        addLog('üö® –ê–¢–ê–ö–ê –ù–ê–ß–ê–õ–ê–°–¨!');
        addLog('üë§ –•–∞–∫–µ—Ä –≤—ã–∑—ã–≤–∞–µ—Ç withdraw()...');
        
        let withdrawCount = 0;
        const maxWithdraws = isSecure ? 1 : 5;
        
        const attackInterval = setInterval(() => {
            withdrawCount++;
            const stolenAmount = 100;
            
            if (withdrawCount <= maxWithdraws) {
                if (isSecure) {
                    addLog(`‚ùå –ü–æ–ø—ã—Ç–∫–∞ ${withdrawCount}: –†–µ–µ–Ω—Ç—Ä–∞–Ω—Å–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞!`);
                } else {
                    setContractBalance(prev => Math.max(0, prev - stolenAmount));
                    addLog(`üí∏ –ü–æ–ø—ã—Ç–∫–∞ ${withdrawCount}: –£–∫—Ä–∞–¥–µ–Ω–æ ${stolenAmount} ETH`);
                }
            }
            
            if (withdrawCount >= maxWithdraws) {
                clearInterval(attackInterval);
                setAttackInProgress(false);
                
                if (isSecure) {
                    addLog('‚úÖ –ê–¢–ê–ö–ê –û–¢–†–ê–ñ–ï–ù–ê! –ö–æ–Ω—Ç—Ä–∞–∫—Ç –∑–∞—â–∏—â—ë–Ω!');
                    addLog('üéâ –•–∞–∫–µ—Ä –Ω–µ —Å–º–æ–≥ —É–∫—Ä–∞—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞!');
                    
                    // –ó–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä—É
                    setTimeout(() => {
                        setGameCompleted(true);
                        completeLevel(5);
                        addLog('üèÜ –ö–£–†–° –ó–ê–í–ï–†–®–Å–ù! –í—ã –Ω–∞—Å—Ç–æ—è—â–∏–π –º–∞—Å—Ç–µ—Ä Solidity!');
                    }, 2000);
                } else {
                    addLog('üíÄ –ö–û–ù–¢–†–ê–ö–¢ –í–ó–õ–û–ú–ê–ù! –ë–∞–ª–∞–Ω—Å –æ–ø—É—Å—Ç–æ—à—ë–Ω!');
                    addLog('‚ùå –†–µ–µ–Ω—Ç—Ä–∞–Ω—Å–∏ –∞—Ç–∞–∫–∞ —Å—Ä–∞–±–æ—Ç–∞–ª–∞!');
                }
            }
        }, 800);
    };

    const handleCompile = () => {
        addLog('üîç –ê–Ω–∞–ª–∏–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞...');
        
        const secure = checkSecurity();
        setIsSecure(secure);
        
        if (secure) {
            addLog('‚úÖ –ö–æ–Ω—Ç—Ä–∞–∫—Ç –∑–∞—â–∏—â—ë–Ω –æ—Ç —Ä–µ–µ–Ω—Ç—Ä–∞–Ω—Å–∏ –∞—Ç–∞–∫!');
            addLog('üõ°Ô∏è –ü—Ä–∏–º–µ–Ω—ë–Ω –ø–∞—Ç—Ç–µ—Ä–Ω: –ü—Ä–æ–≤–µ—Ä–∫–∞ ‚Üí –≠—Ñ—Ñ–µ–∫—Ç ‚Üí –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ');
            complete();
        } else {
            addLog('‚ùå –ö–æ–Ω—Ç—Ä–∞–∫—Ç –≤—Å—ë –µ—â—ë —É—è–∑–≤–∏–º!');
            addLog('üí° –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç–µ balances[msg.sender] -= amount –ü–ï–†–ï–î –≤—ã–∑–æ–≤–æ–º call');
            addLog('üí° –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ modifier nonReentrant');
            addLog('üí° –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ ReentrancyGuard –∏–∑ OpenZeppelin');
        }
        
        setTimeout(() => {
            simulateAttack();
        }, 2000);
    };

    const handleGameComplete = (action: string) => {
        switch (action) {
            case 'restart':
                router.push('/levels/1');
                break;
            case 'levels':
                router.push('/levels/');
                break;
            case 'certificate':
                router.push('/certificate');
                break;
            case 'leaderboard':
                router.push('/leaderboard');
                break;
            case 'home':
                router.push('/');
                break;
            default:
                router.push('/');
        }
    };

    // –≠–∫—Ä–∞–Ω –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã
    if (gameCompleted) {
        return (
            <LevelView>
                <Widget
                    windowMode
                    title="üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ö—É—Ä—Å –∑–∞–≤–µ—Ä—à—ë–Ω!"
                    icon={
                        <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="#e3e3e3">
                            <path d="M480-80q-82 0-155-31.5t-127.5-86Q143-252 111.5-325T80-480q0-83 31.5-156t86-127Q252-817 325-848.5T480-880q83 0 156 31.5T763-763q54 54 85.5 127T880-480q0 82-31.5 155T763-197.5q-54 54.5-127 86T480-80Z"/>
                        </svg>
                    }
                >
                    <div className="h-full w-full flex items-center justify-center p-8">
                        <div className="text-center max-w-2xl">
                            {/* –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–æ—Ä–æ–Ω–∞ */}
                            <div className="text-8xl mb-6 animate-bounce">üëë</div>
                            
                            <h1 className="text-4xl font-bold mb-4 bg-gradient-to-r from-yellow-400 to-orange-500 bg-clip-text text-transparent">
                                –ú–ê–°–¢–ï–† SOLIDITY
                            </h1>
                            
                            <div className="text-xl text-gray-300 mb-8">
                                –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ –≤—Å–µ 5 —É—Ä–æ–≤–Ω–µ–π Smart You –∏ –ø–æ–ª—É—á–∏–ª–∏ –∑–≤–∞–Ω–∏–µ 
                                <span className="font-bold text-yellow-400"> &quot;–°—Ç—Ä–∞–∂ –±–ª–æ–∫—á–µ–π–Ω–∞&quot;</span>!
                            </div>

                            {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
                            <div className="grid grid-cols-3 gap-4 mb-8 p-6 bg-purple-900/30 border border-purple-600 rounded-lg">
                                <div>
                                    <div className="text-3xl font-bold text-blue-400">5</div>
                                    <div className="text-sm text-gray-300">–£—Ä–æ–≤–Ω–µ–π –ø—Ä–æ–π–¥–µ–Ω–æ</div>
                                </div>
                                <div>
                                    <div className="text-3xl font-bold text-yellow-400">100</div>
                                    <div className="text-sm text-gray-300">XP –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ</div>
                                </div>
                                <div>
                                    <div className="text-3xl font-bold text-purple-400">5</div>
                                    <div className="text-sm text-gray-300">–ë–µ–π–¥–∂–µ–π –ø–æ–ª—É—á–µ–Ω–æ</div>
                                </div>
                            </div>

                            {/* –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è */}
                            <div className="mb-8">
                                <h3 className="text-lg font-semibold mb-4">üèÜ –í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:</h3>
                                <div className="grid grid-cols-1 md:grid-cols-2 gap-2 text-sm">
                                    <div className="flex items-center gap-2">
                                        <span>ü•á</span>
                                        <span>–ù–æ–≤–∏—á–æ–∫ –≤ –∫–æ–¥–µ</span>
                                    </div>
                                    <div className="flex items-center gap-2">
                                        <span>üó≥Ô∏è</span>
                                        <span>–ó–∞—â–∏—Ç–Ω–∏–∫ –¥–µ–º–æ–∫—Ä–∞—Ç–∏–∏</span>
                                    </div>
                                    <div className="flex items-center gap-2">
                                        <span>üè™</span>
                                        <span>–¢–æ—Ä–≥–æ–≤–µ—Ü –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤</span>
                                    </div>
                                    <div className="flex items-center gap-2">
                                        <span>üèõÔ∏è</span>
                                        <span>DAO —É—á–∞—Å—Ç–Ω–∏–∫</span>
                                    </div>
                                    <div className="flex items-center gap-2">
                                        <span>üõ°Ô∏è</span>
                                        <span>–°—Ç—Ä–∞–∂ –±–ª–æ–∫—á–µ–π–Ω–∞</span>
                                    </div>
                                </div>
                            </div>

                            {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
                            <div className="space-y-4">
                                <div className="grid grid-cols-2 gap-4">
                                    <button
                                        onClick={() => handleGameComplete('certificate')}
                                        className="px-6 py-3 bg-gradient-to-r from-yellow-600 to-orange-600 text-white rounded-lg hover:from-yellow-700 hover:to-orange-700 transition-all duration-200 font-semibold"
                                    >
                                        üìú –ü–æ–ª—É—á–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
                                    </button>
                                    <button
                                        onClick={() => handleGameComplete('leaderboard')}
                                        className="px-6 py-3 bg-gradient-to-r from-purple-600 to-pink-600 text-white rounded-lg hover:from-purple-700 hover:to-pink-700 transition-all duration-200 font-semibold"
                                    >
                                        üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤
                                    </button>
                                </div>
                                
                                <div className="grid grid-cols-3 gap-2">
                                    <button
                                        onClick={() => handleGameComplete('restart')}
                                        className="px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700 transition-colors"
                                    >
                                        üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ
                                    </button>
                                    <button
                                        onClick={() => handleGameComplete('levels')}
                                        className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors"
                                    >
                                        üìö –ö —É—Ä–æ–≤–Ω—è–º
                                    </button>
                                    <button
                                        onClick={() => handleGameComplete('home')}
                                        className="px-4 py-2 bg-gray-600 text-white rounded hover:bg-gray-700 transition-colors"
                                    >
                                        üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é
                                    </button>
                                </div>
                            </div>

                            {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
                            <div className="mt-8 p-4 bg-blue-900/30 border border-blue-600 rounded-lg text-sm">
                                <div className="font-semibold text-blue-300 mb-2">üöÄ –ß—Ç–æ –¥–∞–ª—å—à–µ?</div>
                                <div className="text-blue-200">
                                    –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏–∑—É—á–∞—Ç—å Solidity, —É—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ —Ö–∞–∫–∞—Ç–æ–Ω–∞—Ö, —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ DeFi –ø—Ä–æ–µ–∫—Ç—ã 
                                    –∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ —Å–æ–æ–±—â–µ—Å—Ç–≤—É –±–ª–æ–∫—á–µ–π–Ω-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤!
                                </div>
                            </div>
                        </div>
                    </div>
                </Widget>
            </LevelView>
        );
    }

    return (
        <LevelView>
            <Widget
                windowMode
                title="–£—Ä–æ–≤–µ–Ω—å 5: –ò—Å–ø—ã—Ç–∞–Ω–∏–µ —Ö–∞–∫–µ—Ä–∞"
                icon={
                    <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="#e3e3e3">
                        <path d="M280-240q-17 0-28.5-11.5T240-280v-280q0-17 11.5-28.5T280-600h40v-80q0-83 58.5-141.5T520-880q83 0 141.5 58.5T720-680v80h40q17 0 28.5 11.5T800-560v280q0 17-11.5 28.5T760-240H280Z"/>
                    </svg>
                }
            >
                <div className="h-full w-full overflow-y-scroll relative pb-24">
                    <div className="absolute bottom-16 right-3 flex gap-2 items-center">
                        <div className={`px-3 py-1 rounded text-sm ${isSecure ? 'bg-green-600' : 'bg-red-600'}`}>
                            {isSecure ? 'üõ°Ô∏è –ó–∞—â–∏—â—ë–Ω' : '‚ö†Ô∏è –£—è–∑–≤–∏–º'}
                        </div>
                        <button
                            className="px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700"
                            onClick={handleCompile}
                            disabled={attackInProgress}
                        >
                            {attackInProgress ? '–ê—Ç–∞–∫–∞...' : '–¢–µ—Å—Ç –∑–∞—â–∏—Ç—ã'}
                        </button>
                    </div>

                    <div className="p-4">
                        <div className="text-2xl font-semibold">
                            üö® –ó–∞–¥–∞—á–∞ #5: –ò—Å–ø—ã—Ç–∞–Ω–∏–µ —Ö–∞–∫–µ—Ä–∞
                        </div>
                        <div className="mt-2 text-lg">
                            –ó–∞—â–∏—Ç–∏—Ç–µ –±–∞–Ω–∫–æ–≤—Å–∫–∏–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç –æ—Ç —Ä–µ–µ–Ω—Ç—Ä–∞–Ω—Å–∏ –∞—Ç–∞–∫–∏. –≠—Ç–æ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –∏—Å–ø—ã—Ç–∞–Ω–∏–µ!
                        </div>

                        {/* –ü–∞–Ω–µ–ª—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ */}
                        <div className="mt-4 space-y-3">
                            {/* –ë–∞–ª–∞–Ω—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ */}
                            <div className={`p-3 border rounded ${contractBalance > 500 ? 'bg-green-900/30 border-green-600' : 'bg-red-900/30 border-red-600'}`}>
                                <div className="font-semibold text-white">–ë–∞–ª–∞–Ω—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞:</div>
                                <div className="text-2xl font-bold">üí∞ {contractBalance} ETH</div>
                                {contractBalance < 500 && (
                                    <div className="text-red-300 text-sm">‚ö†Ô∏è –°—Ä–µ–¥—Å—Ç–≤–∞ —É–∫—Ä–∞–¥–µ–Ω—ã —Ö–∞–∫–µ—Ä–æ–º!</div>
                                )}
                            </div>

                            {/* –°—Ç–∞—Ç—É—Å –∞—Ç–∞–∫–∏ */}
                            {attackInProgress && (
                                <div className="p-3 bg-red-900/50 border border-red-500 rounded animate-pulse">
                                    <div className="font-semibold text-red-300">üö® –ê–¢–ê–ö–ê –í –ü–†–û–¶–ï–°–°–ï</div>
                                    <div className="text-red-200">–•–∞–∫–µ—Ä –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ –≤—ã–∑—ã–≤–∞–µ—Ç withdraw()...</div>
                                </div>
                            )}

                            {/* –ü–æ–¥—Å–∫–∞–∑–∫–∏ */}
                            <div className="p-3 bg-yellow-900/30 border border-yellow-600 rounded">
                                <div className="font-semibold text-yellow-300">üõ°Ô∏è –ú–µ—Ç–æ–¥—ã –∑–∞—â–∏—Ç—ã:</div>
                                <div className="text-yellow-200 text-sm space-y-1">
                                    <div>‚Ä¢ –ü–∞—Ç—Ç–µ—Ä–Ω: –ü—Ä–æ–≤–µ—Ä–∫–∞ ‚Üí –≠—Ñ—Ñ–µ–∫—Ç ‚Üí –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ</div>
                                    <div>‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å modifier nonReentrant</div>
                                    <div>‚Ä¢ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å ReentrancyGuard</div>
                                </div>
                            </div>
                        </div>

                        <div className="mt-6 h-[400px] flex flex-col gap-4">
                            <Editor
                                language="solidity"
                                theme="vs-dark"
                                value={code}
                                onChange={(value?: string) => setCode(value ?? '')}
                                options={{
                                    minimap: { enabled: false },
                                    fontSize: 14,
                                }}
                            />
                        </div>
                    </div>
                </div>
            </Widget>
        </LevelView>
    );
}