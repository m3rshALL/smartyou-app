'use client';

import React, { useState, useRef, useEffect } from 'react';
import { MessageCircle, Send, Loader2, Bot, User, X, Minimize2, Maximize2 } from 'lucide-react';
import ReactMarkdown from 'react-markdown';
import { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';
import { vscDarkPlus } from 'react-syntax-highlighter/dist/esm/styles/prism';

interface Message {
  id: string;
  role: 'user' | 'assistant';
  content: string;
  timestamp: Date;
}

interface AICodeAssistantProps {
  currentCode?: string;
  onCodeSuggestion?: (code: string) => void;
  className?: string;
}

const SYSTEM_PROMPT = `–í—ã - AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –Ω–∞ Solidity. 

–í–∞—à–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
- –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–π Solidity –∏ –±–ª–æ–∫—á–µ–π–Ω–∞
- –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ –∏ –ø–æ–∏—Å–∫ –æ—à–∏–±–æ–∫
- –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É–ª—É—á—à–µ–Ω–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é
- –ü–æ–º–æ—â—å —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π OpenZeppelin
- –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤

–û—Ç–≤–µ—á–∞–π—Ç–µ –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É. –í—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–∞–π—Ç–µ –ø—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞ –≥–¥–µ —ç—Ç–æ —É–º–µ—Å—Ç–Ω–æ.
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ –¥–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏–π.`;

export default function AICodeAssistant({ 
  currentCode, 
  onCodeSuggestion, 
  className = '' 
}: AICodeAssistantProps) {
  const [messages, setMessages] = useState<Message[]>([]);
  const [input, setInput] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [isOpen, setIsOpen] = useState(false);
  const [isMinimized, setIsMinimized] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const inputRef = useRef<HTMLInputElement>(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  useEffect(() => {
    if (isOpen && !isMinimized) {
      inputRef.current?.focus();
    }
  }, [isOpen, isMinimized]);

  const sendMessage = async () => {
    if (!input.trim() || isLoading) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      role: 'user',
      content: input.trim(),
      timestamp: new Date(),
    };

    setMessages(prev => [...prev, userMessage]);
    setInput('');
    setIsLoading(true);

    try {
      // –ò–º–∏—Ç–∞—Ü–∏—è AI-–æ—Ç–≤–µ—Ç–∞ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—ã–ª –±—ã –≤—ã–∑–æ–≤ OpenAI API)
      const response = await generateAIResponse(userMessage.content, currentCode);
      
      const assistantMessage: Message = {
        id: (Date.now() + 1).toString(),
        role: 'assistant',
        content: response,
        timestamp: new Date(),
      };

      setMessages(prev => [...prev, assistantMessage]);
    } catch (error) {
      console.error('AI Assistant error:', error);
      
      const errorMessage: Message = {
        id: (Date.now() + 1).toString(),
        role: 'assistant',
        content: '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
        timestamp: new Date(),
      };

      setMessages(prev => [...prev, errorMessage]);
    } finally {
      setIsLoading(false);
    }
  };

  const generateAIResponse = async (userInput: string, code?: string): Promise<string> => {
    // –ò–º–∏—Ç–∞—Ü–∏—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    const input = userInput.toLowerCase();
    
    // –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞
    if (input.includes('–∞–Ω–∞–ª–∏–∑') || input.includes('–ø—Ä–æ–≤–µ—Ä—å') || input.includes('–æ—à–∏–±–∫')) {
      if (code) {
        return analyzeCode(code);
      }
      return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –∫–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –Ø –º–æ–≥—É –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å, –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –∏ –Ω–∞–π—Ç–∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏.";
    }
    
    // –í–æ–ø—Ä–æ—Å—ã –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    if (input.includes('–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç') || input.includes('—É—è–∑–≤–∏–º') || input.includes('—Ö–∞–∫')) {
      return `## üîê –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ Solidity

**–ö–ª—é—á–µ–≤—ã–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏:**
- **Reentrancy** - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ \`ReentrancyGuard\`
- **Integer Overflow** - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ SafeMath –∏–ª–∏ Solidity ^0.8.0
- **Access Control** - –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã

**–ü—Ä–∏–º–µ—Ä –∑–∞—â–∏—Ç—ã:**
\`\`\`solidity
import "@openzeppelin/contracts/utils/ReentrancyGuard.sol";

contract SecureContract is ReentrancyGuard {
    mapping(address => uint256) public balances;
    
    function withdraw() external nonReentrant {
        uint256 amount = balances[msg.sender];
        require(amount > 0, "No funds");
        
        balances[msg.sender] = 0; // State change first
        
        (bool success, ) = msg.sender.call{value: amount}("");
        require(success, "Transfer failed");
    }
}
\`\`\``;
    }
    
    // –í–æ–ø—Ä–æ—Å—ã –æ gas –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    if (input.includes('–≥–∞–∑') || input.includes('–æ–ø—Ç–∏–º–∏–∑') || input.includes('—Å—Ç–æ–∏–º–æ—Å—Ç—å')) {
      return `## ‚õΩ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≥–∞–∑–∞

**–û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏:**
1. **–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ \`uint256\`** –≤–º–µ—Å—Ç–æ –º–µ–Ω—å—à–∏—Ö —Ç–∏–ø–æ–≤
2. **Packed structs** –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ storage
3. **–ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ** –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è
4. **Events –≤–º–µ—Å—Ç–æ storage** –¥–ª—è –ª–æ–≥–æ–≤

**–ü—Ä–∏–º–µ—Ä –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:**
\`\`\`solidity
// ‚ùå –ù–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ
contract Bad {
    uint8 a; uint8 b; uint8 c; // 3 storage slots
}

// ‚úÖ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ  
contract Good {
    uint8 a; uint8 b; uint8 c; // 1 storage slot
    // –î–æ–±–∞–≤–ª—è–µ–º padding –¥–æ 256 –±–∏—Ç
}
\`\`\``;
    }
    
    // –í–æ–ø—Ä–æ—Å—ã –æ–± OpenZeppelin
    if (input.includes('openzeppelin') || input.includes('–æ—Ç–∫—Ä—ã–π') || input.includes('–±–∏–±–ª–∏–æ—Ç–µ–∫')) {
      return `## üìö OpenZeppelin Contracts

**–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã:**
- **ERC20** - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
- **ERC721** - NFT
- **Ownable** - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º  
- **Pausable** - –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π
- **ReentrancyGuard** - –∑–∞—â–∏—Ç–∞ –æ—Ç —Ä–µ–µ–Ω—Ç—Ä–∞–Ω—Ç–Ω–æ—Å—Ç–∏

**–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:**
\`\`\`solidity
import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract MyToken is ERC20, Ownable {
    constructor() ERC20("MyToken", "MTK") Ownable(msg.sender) {
        _mint(msg.sender, 1000000 * 10**decimals());
    }
}
\`\`\``;
    }
    
    // –í–æ–ø—Ä–æ—Å—ã –æ DeFi
    if (input.includes('defi') || input.includes('—Å—Ç–µ–π–∫–∏–Ω–≥') || input.includes('–ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç')) {
      return `## üí∞ DeFi –ü–∞—Ç—Ç–µ—Ä–Ω—ã

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏:**
- **Staking** - –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –Ω–∞–≥—Ä–∞–¥
- **Yield Farming** - –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –Ω–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
- **Flash Loans** - –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ –∑–∞–π–º—ã –±–µ–∑ –∑–∞–ª–æ–≥–∞
- **AMM** - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –º–∞—Ä–∫–µ—Ç-–º–µ–π–∫–µ—Ä—ã

**–ü—Ä–æ—Å—Ç–æ–π —Å—Ç–µ–π–∫–∏–Ω–≥ –∫–æ–Ω—Ç—Ä–∞–∫—Ç:**
\`\`\`solidity
contract SimpleStaking {
    mapping(address => uint256) public stakes;
    mapping(address => uint256) public rewards;
    
    function stake(uint256 amount) external {
        // Transfer tokens
        // Update stakes
        // Calculate rewards
    }
}
\`\`\``;
    }
    
    // –û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã
    return `## ü§ñ AI Code Assistant

–Ø –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º —Å:
- **–ê–Ω–∞–ª–∏–∑–æ–º –∫–æ–¥–∞** - –ø—Ä–æ–≤–µ—Ä–∫–æ–π –æ—à–∏–±–æ–∫ –∏ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
- **–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –≥–∞–∑–∞** - —Å–æ–≤–µ—Ç–∞–º–∏ –ø–æ —ç–∫–æ–Ω–æ–º–∏–∏ 
- **–ü–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏ Solidity** - –ª—É—á—à–∏–º–∏ –ø—Ä–∞–∫—Ç–∏–∫–∞–º–∏
- **OpenZeppelin** - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫
- **DeFi –∫–æ–Ω—Ü–µ–ø—Ü–∏—è–º–∏** - —Å—Ç–µ–π–∫–∏–Ω–≥, —Ç–æ–∫–µ–Ω—ã, AMM

**–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–ø—Ä–æ—Å–∏—Ç—å:**
- "–ü—Ä–æ–≤–µ—Ä—å –º–æ–π –∫–æ–¥ –Ω–∞ –æ—à–∏–±–∫–∏"
- "–ö–∞–∫ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≥–∞–∑?"
- "–û–±—ä—è—Å–Ω–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤"
- "–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å —Ç–æ–∫–µ–Ω ERC20?"

–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å? üöÄ`;
  };

  const analyzeCode = (code: string): string => {
    const issues: string[] = [];
    const suggestions: string[] = [];
    
    // –ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–¥–∞
    if (!code.includes('pragma solidity')) {
      issues.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç pragma –¥–∏—Ä–µ–∫—Ç–∏–≤–∞');
    }
    
    if (!code.includes('SPDX-License-Identifier')) {
      issues.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ª–∏—Ü–µ–Ω–∑–∏—è SPDX');
    }
    
    if (code.includes('msg.sender') && !code.includes('require(')) {
      suggestions.push('–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–æ–∫ –¥–æ—Å—Ç—É–ø–∞ —Å require()');
    }
    
    if (code.includes('transfer') && !code.includes('ReentrancyGuard')) {
      suggestions.push('–î–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤ —Å—Ä–µ–¥—Å—Ç–≤ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ReentrancyGuard');
    }
    
    if (code.includes('uint ') && !code.includes('uint256')) {
      suggestions.push('–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å uint256 –≤–º–µ—Å—Ç–æ uint –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –≥–∞–∑–∞');
    }

    let result = '## üîç –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞\n\n';
    
    if (issues.length > 0) {
      result += '**‚ùå –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:**\n';
      issues.forEach(issue => {
        result += `- ${issue}\n`;
      });
      result += '\n';
    }
    
    if (suggestions.length > 0) {
      result += '**üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n';
      suggestions.forEach(suggestion => {
        result += `- ${suggestion}\n`;
      });
      result += '\n';
    }
    
    if (issues.length === 0 && suggestions.length === 0) {
      result += '**‚úÖ –ö–æ–¥ –≤—ã–≥–ª—è–¥–∏—Ç —Ö–æ—Ä–æ—à–æ!** –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã.\n\n';
      result += '–î–ª—è –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é:\n';
      result += '- –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã\n';
      result += '- –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å –ø–æ–º–æ—â—å—é Slither\n';
      result += '- –ü—Ä–æ–≤–µ—Å—Ç–∏ –∞—É–¥–∏—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏\n';
    }
    
    return result;
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      sendMessage();
    }
  };

  if (!isOpen) {
    return (
      <button
        onClick={() => setIsOpen(true)}
        className={`fixed bottom-6 right-6 bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700 text-white p-4 rounded-full shadow-lg transition-all duration-300 hover:scale-110 z-50 ${className}`}
      >
        <Bot size={24} />
      </button>
    );
  }

  return (
    <div className={`fixed bottom-6 right-6 z-50 ${className}`}>
      <div className={`bg-gray-900 border border-gray-700 rounded-lg shadow-2xl transition-all duration-300 ${
        isMinimized ? 'w-80 h-16' : 'w-96 h-[600px]'
      }`}>
        {/* Header */}
        <div className="flex items-center justify-between p-4 border-b border-gray-700 bg-gradient-to-r from-purple-600 to-blue-600 rounded-t-lg">
          <div className="flex items-center gap-3">
            <Bot size={20} className="text-white" />
            <h3 className="font-semibold text-white">AI Assistant</h3>
          </div>
          <div className="flex items-center gap-2">
            <button
              onClick={() => setIsMinimized(!isMinimized)}
              className="text-white/80 hover:text-white transition-colors"
            >
              {isMinimized ? <Maximize2 size={16} /> : <Minimize2 size={16} />}
            </button>
            <button
              onClick={() => setIsOpen(false)}
              className="text-white/80 hover:text-white transition-colors"
            >
              <X size={16} />
            </button>
          </div>
        </div>

        {!isMinimized && (
          <>
            {/* Messages */}
            <div className="flex-1 overflow-y-auto p-4 space-y-4 h-[480px]">
              {messages.length === 0 && (
                <div className="text-center text-gray-400">
                  <Bot size={48} className="mx-auto mb-4 text-gray-600" />
                  <p className="text-sm">
                    –ü—Ä–∏–≤–µ—Ç! –Ø AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è Solidity.<br />
                    –ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –æ –∫–æ–¥–µ, –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏!
                  </p>
                </div>
              )}

              {messages.map((message) => (
                <div
                  key={message.id}
                  className={`flex items-start gap-3 ${
                    message.role === 'user' ? 'justify-end' : 'justify-start'
                  }`}
                >
                  {message.role === 'assistant' && (
                    <div className="w-8 h-8 bg-gradient-to-r from-purple-600 to-blue-600 rounded-full flex items-center justify-center flex-shrink-0">
                      <Bot size={16} className="text-white" />
                    </div>
                  )}
                  
                  <div
                    className={`max-w-[80%] rounded-lg px-3 py-2 text-sm ${
                      message.role === 'user'
                        ? 'bg-blue-600 text-white'
                        : 'bg-gray-800 text-gray-100 border border-gray-700'
                    }`}
                  >
                    {message.role === 'assistant' ? (
                      <ReactMarkdown
                        components={{
                          code({ inline, className, children, ...props }) {
                            const match = /language-(\w+)/.exec(className || '');
                            return !inline && match ? (
                              <SyntaxHighlighter
                                style={vscDarkPlus}
                                language={match[1]}
                                PreTag="div"
                                className="rounded mt-2"
                                {...props}
                              >
                                {String(children).replace(/\n$/, '')}
                              </SyntaxHighlighter>
                            ) : (
                              <code className="bg-gray-700 px-1 py-0.5 rounded text-xs" {...props}>
                                {children}
                              </code>
                            );
                          },
                        }}
                      >
                        {message.content}
                      </ReactMarkdown>
                    ) : (
                      message.content
                    )}
                  </div>

                  {message.role === 'user' && (
                    <div className="w-8 h-8 bg-gray-700 rounded-full flex items-center justify-center flex-shrink-0">
                      <User size={16} className="text-gray-300" />
                    </div>
                  )}
                </div>
              ))}

              {isLoading && (
                <div className="flex items-start gap-3">
                  <div className="w-8 h-8 bg-gradient-to-r from-purple-600 to-blue-600 rounded-full flex items-center justify-center">
                    <Bot size={16} className="text-white" />
                  </div>
                  <div className="bg-gray-800 border border-gray-700 rounded-lg px-3 py-2 flex items-center gap-2">
                    <Loader2 size={16} className="animate-spin text-blue-400" />
                    <span className="text-sm text-gray-400">–î—É–º–∞—é...</span>
                  </div>
                </div>
              )}

              <div ref={messagesEndRef} />
            </div>

            {/* Input */}
            <div className="p-4 border-t border-gray-700">
              <div className="flex items-center gap-2">
                <input
                  ref={inputRef}
                  type="text"
                  value={input}
                  onChange={(e) => setInput(e.target.value)}
                  onKeyPress={handleKeyPress}
                  placeholder="–°–ø—Ä–æ—Å–∏—Ç–µ –æ –∫–æ–¥–µ, –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏–ª–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏..."
                  className="flex-1 bg-gray-800 border border-gray-600 rounded-lg px-3 py-2 text-sm text-white placeholder-gray-400 focus:outline-none focus:border-blue-500"
                  disabled={isLoading}
                />
                <button
                  onClick={sendMessage}
                  disabled={!input.trim() || isLoading}
                  className="bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700 disabled:opacity-50 disabled:cursor-not-allowed text-white p-2 rounded-lg transition-colors"
                >
                  {isLoading ? (
                    <Loader2 size={16} className="animate-spin" />
                  ) : (
                    <Send size={16} />
                  )}
                </button>
              </div>
            </div>
          </>
        )}
      </div>
    </div>
  );
}
